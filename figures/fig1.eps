%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: splnproc1702.pdf
%%Creator: Adobe Acrobat 10.1.16
%%For: Markus Richter
%%CreationDate: 04.10.2017, 11:21:13
%%BoundingBox: -1 0 343 142
%%HiResBoundingBox: 0 0 342.9366 141.8369
%%CropBox: 0 0 342.9366 141.8369
%%LanguageLevel: 3
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
3 3010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1053 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2017-10-04T11:20+02:00"
   xmp:CreatorTool="PScript5.dll Version 5.2.2"
   xmp:ModifyDate="2017-10-04T11:20+02:00"
   pdf:Producer="Acrobat Distiller 10.1.16 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:cbd15375-7f2c-4e63-8e61-d5e36141f7ce"
   xmpMM:InstanceID="uuid:095e3bab-d131-4abe-8a1c-a474fb450278">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Microsoft Word - splnproc1702.docm</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Markus Richter</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -141.837 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
-7.62939e-6 0 mo
-7.62939e-6 141.837 li
342.937 141.837 li
342.937 0 li
cp
clp
16.9956 126.538 mo
335.776 126.538 li
335.776 4.67816 li
16.9956 4.67816 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
16.6356 126.538 mo
17.3556 126.538 li
17.3556 4.67816 li
16.6356 4.67816 li
cp
0 0 0 .56347 cmyk
f
14.4756 126.178 mo
16.9956 126.178 li
16.9956 126.898 li
14.4756 126.898 li
cp
14.4756 113.998 mo
16.9956 113.998 li
16.9956 114.718 li
14.4756 114.718 li
cp
14.4756 101.818 mo
16.9956 101.818 li
16.9956 102.538 li
14.4756 102.538 li
cp
14.4756 89.6381 mo
16.9956 89.6381 li
16.9956 90.3581 li
14.4756 90.3581 li
cp
14.4756 77.4581 mo
16.9956 77.4581 li
16.9956 78.1781 li
14.4756 78.1781 li
cp
14.4756 65.2781 mo
16.9956 65.2781 li
16.9956 65.9982 li
14.4756 65.9982 li
cp
14.4756 53.0981 mo
16.9956 53.0981 li
16.9956 53.8181 li
14.4756 53.8181 li
cp
14.4756 40.9181 mo
16.9956 40.9181 li
16.9956 41.6381 li
14.4756 41.6381 li
cp
14.4756 28.7381 mo
16.9956 28.7381 li
16.9956 29.4581 li
14.4756 29.4581 li
cp
14.4756 16.4981 mo
16.9956 16.4981 li
16.9956 17.2181 li
14.4756 17.2181 li
cp
14.4756 4.31812 mo
16.9956 4.31812 li
16.9956 5.03809 li
14.4756 5.03809 li
cp
f
16.9956 126.898 mo
335.776 126.898 li
335.776 126.178 li
16.9956 126.178 li
cp
f
16.6356 126.538 mo
17.3556 126.538 li
17.3556 129.118 li
16.6356 129.118 li
cp
17.3556 126.538 mo
cp
27.2556 126.538 mo
27.9756 126.538 li
27.9756 129.118 li
27.2556 129.118 li
cp
27.9756 126.538 mo
cp
37.8756 126.538 mo
38.5956 126.538 li
38.5956 129.118 li
37.8756 129.118 li
cp
38.5956 126.538 mo
cp
48.4956 126.538 mo
49.2156 126.538 li
49.2156 129.118 li
48.4956 129.118 li
cp
49.2156 126.538 mo
cp
59.1156 126.538 mo
59.8356 126.538 li
59.8356 129.118 li
59.1156 129.118 li
cp
59.8356 126.538 mo
cp
69.7356 126.538 mo
70.4556 126.538 li
70.4556 129.118 li
69.7356 129.118 li
cp
70.4556 126.538 mo
cp
80.4156 126.538 mo
81.1356 126.538 li
81.1356 129.118 li
80.4156 129.118 li
cp
81.1356 126.538 mo
cp
91.0356 126.538 mo
91.7556 126.538 li
91.7556 129.118 li
91.0356 129.118 li
cp
91.7556 126.538 mo
cp
101.656 126.538 mo
102.376 126.538 li
102.376 129.118 li
101.656 129.118 li
cp
102.376 126.538 mo
cp
112.276 126.538 mo
112.996 126.538 li
112.996 129.118 li
112.276 129.118 li
cp
112.996 126.538 mo
cp
122.896 126.538 mo
123.616 126.538 li
123.616 129.118 li
122.896 129.118 li
cp
123.616 126.538 mo
cp
133.516 126.538 mo
134.236 126.538 li
134.236 129.118 li
133.516 129.118 li
cp
134.236 126.538 mo
cp
144.136 126.538 mo
144.856 126.538 li
144.856 129.118 li
144.136 129.118 li
cp
144.856 126.538 mo
cp
154.756 126.538 mo
155.476 126.538 li
155.476 129.118 li
154.756 129.118 li
cp
155.476 126.538 mo
cp
165.436 126.538 mo
166.156 126.538 li
166.156 129.118 li
165.436 129.118 li
cp
166.156 126.538 mo
cp
176.056 126.538 mo
176.776 126.538 li
176.776 129.118 li
176.056 129.118 li
cp
176.776 126.538 mo
cp
186.676 126.538 mo
187.396 126.538 li
187.396 129.118 li
186.676 129.118 li
cp
187.396 126.538 mo
cp
197.296 126.538 mo
198.016 126.538 li
198.016 129.118 li
197.296 129.118 li
cp
198.016 126.538 mo
cp
207.916 126.538 mo
208.636 126.538 li
208.636 129.118 li
207.916 129.118 li
cp
208.636 126.538 mo
cp
218.536 126.538 mo
219.256 126.538 li
219.256 129.118 li
218.536 129.118 li
cp
219.256 126.538 mo
cp
229.156 126.538 mo
229.876 126.538 li
229.876 129.118 li
229.156 129.118 li
cp
229.876 126.538 mo
cp
239.776 126.538 mo
240.496 126.538 li
240.496 129.118 li
239.776 129.118 li
cp
240.496 126.538 mo
cp
250.396 126.538 mo
251.116 126.538 li
251.116 129.118 li
250.396 129.118 li
cp
251.116 126.538 mo
cp
261.076 126.538 mo
261.796 126.538 li
261.796 129.118 li
261.076 129.118 li
cp
261.796 126.538 mo
cp
271.696 126.538 mo
272.416 126.538 li
272.416 129.118 li
271.696 129.118 li
cp
272.416 126.538 mo
cp
282.316 126.538 mo
283.036 126.538 li
283.036 129.118 li
282.316 129.118 li
cp
283.036 126.538 mo
cp
292.936 126.538 mo
293.656 126.538 li
293.656 129.118 li
292.936 129.118 li
cp
293.656 126.538 mo
cp
303.556 126.538 mo
304.276 126.538 li
304.276 129.118 li
303.556 129.118 li
cp
304.276 126.538 mo
cp
314.176 126.538 mo
314.896 126.538 li
314.896 129.118 li
314.176 129.118 li
cp
314.896 126.538 mo
cp
324.796 126.538 mo
325.516 126.538 li
325.516 129.118 li
324.796 129.118 li
cp
325.516 126.538 mo
cp
335.416 126.538 mo
336.136 126.538 li
336.136 129.118 li
335.416 129.118 li
cp
f
gsave
16.9956 4.6781 mo
336.496 4.6781 li
336.496 127.258 li
16.9956 127.258 li
cp
eclp
16.8156 126.118 mo
18.5556 125.278 li
18.7956 125.218 19.0956 125.278 19.1556 125.518 cv
19.2756 125.758 19.1556 126.058 18.9156 126.178 cv
17.1756 126.958 li
16.9356 127.078 16.6956 126.958 16.5756 126.718 cv
16.4556 126.478 16.5756 126.238 16.8156 126.118 cv
cp
20.2956 124.498 mo
22.0356 123.718 li
22.2756 123.598 22.5756 123.718 22.6956 123.958 cv
22.7556 124.198 22.6956 124.438 22.4556 124.558 cv
20.6556 125.398 li
20.4156 125.458 20.1756 125.398 20.0556 125.158 cv
19.9356 124.918 20.0556 124.618 20.2956 124.498 cv
cp
23.7756 122.878 mo
25.5156 122.098 li
25.7556 121.978 26.0556 122.098 26.1756 122.338 cv
26.2956 122.578 26.1756 122.878 25.9356 122.998 cv
24.1956 123.778 li
23.9556 123.898 23.6556 123.778 23.5356 123.538 cv
23.4156 123.298 23.5356 122.998 23.7756 122.878 cv
cp
27.2556 121.318 mo
27.4356 121.258 li
27.4956 121.198 27.6156 121.198 27.7356 121.198 cv
29.4156 121.618 li
29.7156 121.678 29.8356 121.918 29.7756 122.158 cv
29.7156 122.458 29.4756 122.578 29.2356 122.518 cv
27.4956 122.158 li
27.7956 122.098 li
27.6756 122.158 li
27.4356 122.278 27.1356 122.158 27.0156 121.918 cv
26.8956 121.678 27.0156 121.438 27.2556 121.318 cv
cp
31.3356 122.038 mo
33.1956 122.458 li
33.4356 122.518 33.6156 122.818 33.5556 123.058 cv
33.4956 123.298 33.1956 123.478 32.9556 123.418 cv
31.0956 122.998 li
30.8556 122.938 30.6756 122.638 30.7356 122.398 cv
30.7956 122.158 31.0356 121.978 31.3356 122.038 cv
cp
35.0556 122.878 mo
36.9156 123.358 li
37.1556 123.418 37.3356 123.658 37.2756 123.898 cv
37.2156 124.198 36.9756 124.318 36.6756 124.258 cv
34.8156 123.838 li
34.5756 123.778 34.3956 123.538 34.4556 123.238 cv
34.5156 122.998 34.8156 122.818 35.0556 122.878 cv
cp
38.4756 123.478 mo
40.2156 122.698 li
40.4556 122.578 40.6956 122.698 40.8156 122.938 cv
40.9356 123.178 40.8156 123.478 40.5756 123.598 cv
38.8356 124.378 li
38.5956 124.498 38.3556 124.378 38.2356 124.138 cv
38.1156 123.898 38.2356 123.598 38.4756 123.478 cv
cp
41.9556 121.918 mo
43.6956 121.078 li
43.9356 120.958 44.1756 121.078 44.2956 121.318 cv
44.4156 121.558 44.2956 121.858 44.0556 121.978 cv
42.3156 122.758 li
42.0756 122.878 41.8356 122.758 41.7156 122.518 cv
41.5956 122.278 41.7156 121.978 41.9556 121.918 cv
cp
45.4356 120.298 mo
47.1756 119.458 li
47.4156 119.338 47.6556 119.458 47.7756 119.698 cv
47.8956 119.938 47.7756 120.238 47.5356 120.358 cv
45.7956 121.138 li
45.5556 121.258 45.3156 121.138 45.1956 120.898 cv
45.0756 120.658 45.1956 120.418 45.4356 120.298 cv
cp
49.0356 118.678 mo
50.8956 118.258 li
51.1356 118.198 51.3756 118.378 51.4356 118.618 cv
51.4956 118.858 51.3756 119.158 51.0756 119.218 cv
49.2156 119.638 li
48.9756 119.698 48.7356 119.518 48.6756 119.278 cv
48.6156 118.978 48.7356 118.738 49.0356 118.678 cv
cp
52.7556 117.838 mo
54.6156 117.418 li
54.9156 117.358 55.1556 117.538 55.2156 117.778 cv
55.2756 118.018 55.0956 118.318 54.8556 118.378 cv
52.9956 118.798 li
52.6956 118.858 52.4556 118.678 52.3956 118.438 cv
52.3356 118.138 52.5156 117.898 52.7556 117.838 cv
cp
56.5356 116.998 mo
58.3956 116.578 li
58.6356 116.518 58.8756 116.698 58.9356 116.938 cv
58.9956 117.178 58.8756 117.478 58.5756 117.478 cv
56.7156 117.958 li
56.4756 118.018 56.1756 117.838 56.1156 117.598 cv
56.1156 117.298 56.2356 117.058 56.5356 116.998 cv
cp
60.2556 116.158 mo
62.1156 115.738 li
62.3556 115.678 62.6556 115.798 62.7156 116.098 cv
62.7756 116.338 62.5956 116.578 62.3556 116.638 cv
60.4956 117.058 li
60.1956 117.118 59.9556 116.998 59.8956 116.698 cv
59.8356 116.458 60.0156 116.218 60.2556 116.158 cv
cp
63.9756 115.258 mo
65.8356 114.838 li
66.1356 114.778 66.3756 114.958 66.4356 115.198 cv
66.4956 115.438 66.3156 115.738 66.0756 115.798 cv
64.2156 116.218 li
63.9756 116.278 63.6756 116.098 63.6156 115.858 cv
63.5556 115.618 63.7356 115.318 63.9756 115.258 cv
cp
67.7556 114.418 mo
69.6156 113.998 li
69.8556 113.938 70.0956 114.058 70.1556 114.358 cv
70.2156 114.598 70.0956 114.838 69.7956 114.898 cv
67.9356 115.318 li
67.6956 115.378 67.4556 115.258 67.3956 114.958 cv
67.3356 114.718 67.4556 114.478 67.7556 114.418 cv
cp
71.2956 113.278 mo
73.0356 112.498 li
73.2756 112.378 73.5756 112.498 73.6956 112.738 cv
73.7556 112.978 73.6956 113.278 73.4556 113.338 cv
71.6556 114.178 li
71.4156 114.298 71.1756 114.178 71.0556 113.938 cv
70.9356 113.698 71.0556 113.398 71.2956 113.278 cv
cp
74.7756 111.718 mo
76.5156 110.878 li
76.7556 110.818 77.0556 110.878 77.1756 111.118 cv
77.2956 111.358 77.1756 111.658 76.9356 111.778 cv
75.1956 112.558 li
74.9556 112.678 74.6556 112.558 74.5356 112.318 cv
74.4156 112.078 74.5356 111.778 74.7756 111.718 cv
cp
78.2556 110.098 mo
79.9956 109.318 li
80.2356 109.198 80.5356 109.318 80.6556 109.558 cv
80.7756 109.798 80.6556 110.098 80.4156 110.158 cv
78.6756 110.998 li
78.4356 111.118 78.1356 110.998 78.0156 110.758 cv
77.9556 110.518 78.0156 110.218 78.2556 110.098 cv
cp
82.0956 110.038 mo
83.4756 111.298 li
83.6556 111.478 83.7156 111.778 83.5356 112.018 cv
83.3556 112.198 83.0556 112.198 82.8156 112.018 cv
81.4356 110.758 li
81.1956 110.578 81.1956 110.278 81.3756 110.038 cv
81.5556 109.858 81.8556 109.858 82.0956 110.038 cv
cp
84.9156 112.618 mo
86.2956 113.938 li
86.5356 114.118 86.5356 114.418 86.3556 114.598 cv
86.1756 114.778 85.8756 114.778 85.6956 114.598 cv
84.2556 113.338 li
84.0756 113.158 84.0156 112.858 84.1956 112.678 cv
84.3756 112.438 84.6756 112.438 84.9156 112.618 cv
cp
87.7356 115.198 mo
89.1756 116.518 li
89.3556 116.698 89.3556 116.998 89.1756 117.178 cv
88.9956 117.358 88.6956 117.418 88.5156 117.238 cv
87.0756 115.918 li
86.8956 115.738 86.8956 115.438 87.0756 115.258 cv
87.2556 115.018 87.5556 115.018 87.7356 115.198 cv
cp
90.5556 117.778 mo
91.6956 118.858 li
91.2156 118.798 li
91.5156 118.618 li
91.7556 118.498 92.0556 118.618 92.1756 118.858 cv
92.2356 119.098 92.1756 119.398 91.9356 119.518 cv
91.5756 119.638 li
91.3956 119.758 91.2156 119.698 91.0956 119.578 cv
89.8956 118.498 li
89.7156 118.318 89.7156 118.018 89.8956 117.838 cv
90.0756 117.658 90.3756 117.598 90.5556 117.778 cv
cp
93.2556 117.838 mo
94.9956 117.058 li
95.2356 116.938 95.5356 117.058 95.6556 117.298 cv
95.7756 117.538 95.6556 117.778 95.4156 117.898 cv
93.6756 118.678 li
93.4356 118.798 93.1356 118.738 93.0156 118.498 cv
92.8956 118.198 93.0156 117.958 93.2556 117.838 cv
cp
96.7356 116.218 mo
98.4756 115.438 li
98.7156 115.318 99.0156 115.438 99.1356 115.678 cv
99.2556 115.918 99.1356 116.218 98.8956 116.338 cv
97.1556 117.118 li
96.9156 117.238 96.6156 117.118 96.4956 116.878 cv
96.4356 116.638 96.4956 116.338 96.7356 116.218 cv
cp
100.276 114.658 mo
101.836 113.938 li
101.896 113.878 102.016 113.878 102.136 113.878 cv
102.316 113.938 li
102.556 113.998 102.736 114.238 102.676 114.538 cv
102.616 114.778 102.376 114.898 102.076 114.898 cv
101.896 114.838 li
102.196 114.778 li
100.636 115.498 li
100.396 115.618 100.096 115.498 100.036 115.258 cv
99.9156 115.018 100.036 114.718 100.276 114.658 cv
cp
104.176 114.358 mo
106.036 114.778 li
106.336 114.838 106.456 115.138 106.396 115.378 cv
106.336 115.618 106.096 115.798 105.856 115.738 cv
103.996 115.318 li
103.696 115.258 103.576 114.958 103.636 114.718 cv
103.696 114.478 103.936 114.298 104.176 114.358 cv
cp
107.896 115.258 mo
109.816 115.678 li
110.056 115.738 110.236 115.978 110.176 116.218 cv
110.116 116.518 109.816 116.638 109.576 116.578 cv
107.716 116.158 li
107.476 116.098 107.296 115.858 107.356 115.618 cv
107.416 115.318 107.656 115.198 107.896 115.258 cv
cp
111.676 116.098 mo
112.756 116.338 li
112.336 116.458 li
112.936 115.918 li
113.116 115.738 113.416 115.738 113.596 115.918 cv
113.776 116.158 113.776 116.458 113.536 116.638 cv
112.936 117.178 li
112.816 117.298 112.696 117.298 112.516 117.298 cv
111.436 117.058 li
111.196 116.998 111.016 116.698 111.076 116.458 cv
111.136 116.218 111.436 116.038 111.676 116.098 cv
cp
114.316 114.598 mo
115.756 113.338 li
115.936 113.158 116.236 113.158 116.416 113.338 cv
116.596 113.518 116.596 113.818 116.356 113.998 cv
114.976 115.318 li
114.796 115.498 114.496 115.498 114.316 115.318 cv
114.136 115.078 114.136 114.778 114.316 114.598 cv
cp
117.136 112.018 mo
118.576 110.698 li
118.756 110.518 119.056 110.518 119.236 110.758 cv
119.416 110.938 119.416 111.238 119.236 111.418 cv
117.796 112.738 li
117.616 112.918 117.316 112.858 117.136 112.678 cv
116.956 112.498 116.956 112.198 117.136 112.018 cv
cp
119.956 109.378 mo
121.396 108.118 li
121.576 107.938 121.876 107.938 122.056 108.118 cv
122.236 108.358 122.236 108.658 122.056 108.838 cv
120.616 110.098 li
120.436 110.278 120.136 110.278 119.956 110.098 cv
119.776 109.918 119.776 109.558 119.956 109.378 cv
cp
122.776 106.798 mo
122.956 106.678 li
122.956 106.678 123.016 106.618 123.076 106.618 cv
124.636 105.898 li
124.876 105.778 125.176 105.898 125.296 106.138 cv
125.356 106.378 125.296 106.618 125.056 106.738 cv
123.436 107.458 li
123.556 107.398 li
123.436 107.518 li
123.256 107.698 122.956 107.698 122.776 107.458 cv
122.596 107.278 122.596 106.978 122.776 106.798 cv
cp
126.376 105.058 mo
128.116 104.278 li
128.356 104.158 128.656 104.278 128.776 104.518 cv
128.896 104.758 128.776 105.058 128.536 105.178 cv
126.796 105.958 li
126.556 106.078 126.256 105.958 126.136 105.718 cv
126.016 105.478 126.136 105.178 126.376 105.058 cv
cp
129.856 103.498 mo
131.596 102.658 li
131.836 102.598 132.136 102.658 132.256 102.898 cv
132.376 103.138 132.256 103.438 132.016 103.558 cv
130.276 104.338 li
130.036 104.458 129.736 104.338 129.616 104.098 cv
129.496 103.858 129.616 103.618 129.856 103.498 cv
cp
133.336 101.878 mo
133.696 101.758 li
133.696 101.698 133.756 101.698 133.756 101.698 cv
135.316 101.338 li
135.556 101.278 135.796 101.458 135.856 101.698 cv
135.916 101.998 135.796 102.238 135.496 102.298 cv
133.996 102.658 li
134.056 102.598 li
133.756 102.778 li
133.516 102.838 133.216 102.778 133.156 102.538 cv
133.036 102.298 133.096 101.998 133.336 101.878 cv
cp
137.176 100.918 mo
139.036 100.498 li
139.276 100.438 139.576 100.558 139.636 100.858 cv
139.696 101.098 139.516 101.338 139.276 101.398 cv
137.416 101.878 li
137.116 101.938 136.876 101.758 136.816 101.518 cv
136.756 101.218 136.936 100.978 137.176 100.918 cv
cp
140.896 100.078 mo
142.756 99.5981 li
143.056 99.5381 143.296 99.7181 143.356 99.9581 cv
143.416 100.258 143.236 100.498 142.996 100.558 cv
141.136 100.978 li
140.896 101.038 140.596 100.858 140.536 100.618 cv
140.476 100.378 140.656 100.138 140.896 100.078 cv
cp
144.556 99.1782 mo
146.296 98.3381 li
146.536 98.2781 146.836 98.3381 146.956 98.5781 cv
147.016 98.8181 146.956 99.1181 146.716 99.2382 cv
144.976 100.018 li
144.676 100.138 144.436 100.018 144.316 99.7781 cv
144.196 99.5381 144.316 99.2982 144.556 99.1782 cv
cp
148.036 97.5581 mo
149.776 96.7781 li
150.016 96.6581 150.316 96.7781 150.436 97.0181 cv
150.556 97.2581 150.436 97.5581 150.196 97.6181 cv
148.456 98.4581 li
148.216 98.5781 147.916 98.4581 147.796 98.2181 cv
147.676 97.9781 147.796 97.6782 148.036 97.5581 cv
cp
151.516 95.9981 mo
153.256 95.1581 li
153.496 95.0381 153.796 95.1581 153.916 95.3981 cv
154.036 95.6381 153.916 95.9381 153.676 96.0581 cv
151.936 96.8381 li
151.696 96.9581 151.396 96.8381 151.276 96.5981 cv
151.156 96.3582 151.276 96.0581 151.516 95.9981 cv
cp
154.936 94.3781 mo
156.496 93.2982 li
156.736 93.1782 157.036 93.2382 157.216 93.4182 cv
157.336 93.6581 157.276 93.9581 157.096 94.0781 cv
155.476 95.1581 li
155.236 95.3381 154.936 95.2781 154.816 95.0381 cv
154.696 94.8582 154.696 94.5581 154.936 94.3781 cv
cp
158.116 92.2181 mo
159.676 91.1381 li
159.916 90.9581 160.216 91.0181 160.336 91.2581 cv
160.516 91.4981 160.456 91.7982 160.216 91.9182 cv
158.656 92.9981 li
158.416 93.1782 158.116 93.1181 157.996 92.8781 cv
157.816 92.6981 157.876 92.3981 158.116 92.2181 cv
cp
161.296 90.0581 mo
162.856 88.9781 li
163.096 88.7982 163.396 88.8582 163.516 89.0981 cv
163.696 89.3381 163.636 89.5781 163.396 89.7581 cv
161.836 90.8381 li
161.596 91.0181 161.296 90.9581 161.176 90.7181 cv
160.996 90.4781 161.056 90.1782 161.296 90.0581 cv
cp
164.416 87.8981 mo
165.496 87.1181 li
165.616 87.0581 165.796 87.0581 165.916 87.0581 cv
166.516 87.1782 li
166.756 87.2382 166.936 87.5381 166.876 87.7781 cv
166.816 88.0181 166.516 88.1981 166.276 88.1381 cv
165.676 88.0181 li
166.036 87.9581 li
164.956 88.6782 li
164.776 88.7982 164.476 88.7382 164.296 88.5581 cv
164.176 88.3181 164.236 88.0181 164.416 87.8981 cv
cp
168.376 87.6581 mo
170.236 88.0781 li
170.476 88.1381 170.656 88.3781 170.596 88.6782 cv
170.536 88.9182 170.296 89.0381 169.996 89.0381 cv
168.136 88.5581 li
167.896 88.4981 167.716 88.2581 167.776 88.0181 cv
167.836 87.7181 168.136 87.5981 168.376 87.6581 cv
cp
172.096 88.4981 mo
173.956 88.9182 li
174.256 88.9781 174.376 89.2781 174.316 89.5181 cv
174.256 89.7581 174.016 89.9381 173.776 89.8781 cv
171.916 89.4581 li
171.616 89.3981 171.496 89.0981 171.556 88.8582 cv
171.616 88.6181 171.856 88.4381 172.096 88.4981 cv
cp
175.876 89.3981 mo
176.536 89.5181 li
176.596 89.5181 176.656 89.5781 176.716 89.5781 cv
177.676 90.2982 li
177.916 90.4781 177.976 90.7781 177.796 90.9581 cv
177.676 91.1981 177.376 91.2581 177.136 91.0781 cv
176.116 90.4182 li
176.296 90.4781 li
175.636 90.2982 li
175.396 90.2382 175.216 89.9981 175.276 89.7581 cv
175.336 89.4581 175.576 89.3381 175.876 89.3981 cv
cp
179.296 91.3781 mo
180.856 92.4581 li
181.096 92.6381 181.156 92.9381 180.976 93.1181 cv
180.856 93.3582 180.556 93.4182 180.316 93.2982 cv
178.756 92.1581 li
178.516 92.0381 178.456 91.7382 178.636 91.4981 cv
178.756 91.3181 179.056 91.2581 179.296 91.3781 cv
cp
182.416 93.5381 mo
184.036 94.6782 li
184.216 94.7982 184.276 95.0981 184.156 95.3381 cv
183.976 95.5181 183.676 95.5781 183.496 95.4581 cv
181.876 94.3781 li
181.696 94.1981 181.636 93.8981 181.756 93.7181 cv
181.936 93.4781 182.236 93.4182 182.416 93.5381 cv
cp
185.596 95.7581 mo
187.156 96.8381 li
187.396 96.9581 187.456 97.2581 187.336 97.4981 cv
187.156 97.7382 186.856 97.7982 186.616 97.6181 cv
185.056 96.5381 li
184.816 96.3582 184.756 96.0581 184.936 95.8781 cv
185.116 95.6381 185.356 95.5781 185.596 95.7581 cv
cp
187.696 95.5781 mo
188.836 94.0181 li
188.956 93.8381 189.256 93.7781 189.496 93.9581 cv
189.676 94.0781 189.736 94.3781 189.616 94.6181 cv
188.476 96.1782 li
188.296 96.3582 187.996 96.4182 187.816 96.2982 cv
187.576 96.1181 187.516 95.8181 187.696 95.5781 cv
cp
189.916 92.5181 mo
191.056 90.9581 li
191.236 90.7181 191.536 90.6581 191.716 90.8381 cv
191.956 90.9581 192.016 91.2581 191.836 91.4981 cv
190.696 93.0581 li
190.576 93.2982 190.276 93.2982 190.036 93.1782 cv
189.856 92.9981 189.796 92.6981 189.916 92.5181 cv
cp
192.196 89.3981 mo
193.336 87.8381 li
193.456 87.5981 193.756 87.5381 193.996 87.7181 cv
194.236 87.8981 194.236 88.1981 194.116 88.3781 cv
192.976 89.9381 li
192.796 90.1782 192.496 90.2382 192.316 90.0581 cv
192.076 89.8781 192.016 89.5781 192.196 89.3981 cv
cp
194.476 86.2781 mo
195.556 84.7181 li
195.736 84.4781 196.036 84.4781 196.276 84.5981 cv
196.456 84.7781 196.516 85.0781 196.336 85.2581 cv
195.256 86.8181 li
195.076 87.0581 194.776 87.1181 194.536 86.9381 cv
194.356 86.8181 194.296 86.5181 194.476 86.2781 cv
cp
196.696 83.1581 mo
197.236 82.3781 li
197.356 82.3181 197.416 82.2581 197.536 82.1981 cv
198.496 82.0181 li
198.736 81.9581 198.976 82.0781 199.036 82.3781 cv
199.096 82.6181 198.976 82.8582 198.676 82.9182 cv
197.776 83.1581 li
198.016 82.9781 li
197.476 83.7581 li
197.356 83.9381 197.056 83.9981 196.816 83.8181 cv
196.576 83.6981 196.576 83.3981 196.696 83.1581 cv
cp
200.356 81.5981 mo
202.216 81.1782 li
202.516 81.1181 202.756 81.2382 202.816 81.5381 cv
202.876 81.7781 202.696 82.0181 202.456 82.0781 cv
200.596 82.4981 li
200.296 82.5581 200.056 82.3781 199.996 82.1381 cv
199.936 81.8981 200.116 81.6581 200.356 81.5981 cv
cp
204.136 80.6981 mo
205.996 80.2781 li
206.236 80.2181 206.476 80.3981 206.536 80.6381 cv
206.596 80.9381 206.476 81.1782 206.176 81.2382 cv
204.316 81.6581 li
204.076 81.7181 203.776 81.5381 203.716 81.2982 cv
203.716 81.0581 203.836 80.7581 204.136 80.6981 cv
cp
207.856 79.8582 mo
208.156 79.7982 li
208.096 79.8582 li
209.536 79.1981 li
209.776 79.0781 210.076 79.1381 210.136 79.3781 cv
210.256 79.6181 210.136 79.9182 209.896 80.0381 cv
208.456 80.6981 li
208.396 80.7581 li
208.036 80.8181 li
207.796 80.8781 207.556 80.6981 207.496 80.4581 cv
207.436 80.2181 207.616 79.9182 207.856 79.8582 cv
cp
211.276 78.3582 mo
213.016 77.5781 li
213.256 77.4581 213.556 77.5781 213.616 77.8181 cv
213.736 78.0581 213.676 78.2982 213.436 78.4182 cv
211.696 79.2581 li
211.456 79.3181 211.156 79.2581 211.036 79.0181 cv
210.916 78.7781 211.036 78.4781 211.276 78.3582 cv
cp
214.756 76.7382 mo
216.496 75.9581 li
216.736 75.8381 217.036 75.9581 217.156 76.1981 cv
217.216 76.4381 217.156 76.6782 216.916 76.7982 cv
215.176 77.6381 li
214.936 77.7581 214.636 77.6381 214.516 77.3981 cv
214.396 77.1581 214.516 76.8582 214.756 76.7382 cv
cp
218.236 75.1181 mo
218.716 74.9381 li
218.836 74.8781 218.956 74.8781 219.076 74.9381 cv
219.196 74.9981 219.316 75.0581 219.376 75.1782 cv
219.796 76.5581 li
219.856 76.7982 219.736 77.0381 219.496 77.1581 cv
219.256 77.2181 218.956 77.0981 218.896 76.8582 cv
218.416 75.5381 li
219.076 75.7781 li
218.656 76.0181 li
218.416 76.1381 218.116 76.0181 217.996 75.7781 cv
217.876 75.5381 217.996 75.2382 218.236 75.1181 cv
cp
220.396 78.3582 mo
220.996 80.1581 li
221.116 80.4581 220.996 80.6981 220.696 80.8181 cv
220.456 80.8781 220.216 80.7581 220.096 80.5181 cv
219.496 78.6581 li
219.436 78.4182 219.556 78.1181 219.796 78.0581 cv
220.036 77.9981 220.336 78.1181 220.396 78.3582 cv
cp
221.656 82.0181 mo
222.256 83.8181 li
222.316 84.0581 222.196 84.3582 221.956 84.4182 cv
221.656 84.5381 221.416 84.3582 221.356 84.1181 cv
220.696 82.3181 li
220.636 82.0781 220.756 81.7781 220.996 81.7181 cv
221.296 81.5981 221.536 81.7781 221.656 82.0181 cv
cp
222.856 85.6181 mo
223.456 87.4781 li
223.516 87.7181 223.396 88.0181 223.156 88.0781 cv
222.916 88.1381 222.616 88.0181 222.556 87.7781 cv
221.956 85.9781 li
221.836 85.6782 222.016 85.4381 222.256 85.3181 cv
222.496 85.2581 222.736 85.3781 222.856 85.6181 cv
cp
224.056 89.2781 mo
224.656 91.0781 li
224.776 91.3781 224.656 91.6181 224.356 91.7382 cv
224.116 91.7982 223.876 91.6782 223.756 91.4381 cv
223.156 89.5781 li
223.096 89.3381 223.216 89.0381 223.456 88.9781 cv
223.696 88.9182 223.996 89.0381 224.056 89.2781 cv
cp
225.316 92.9381 mo
225.916 94.7382 li
225.976 94.9781 225.856 95.2781 225.616 95.3381 cv
225.376 95.4581 225.076 95.2781 225.016 95.0381 cv
224.356 93.2382 li
224.296 92.9981 224.416 92.6981 224.656 92.6381 cv
224.956 92.5181 225.196 92.6981 225.316 92.9381 cv
cp
226.516 96.5981 mo
227.116 98.3981 li
227.176 98.6381 227.056 98.9381 226.816 98.9981 cv
226.576 99.0581 226.276 98.9381 226.216 98.6981 cv
225.616 96.8981 li
225.496 96.5981 225.676 96.3582 225.916 96.2382 cv
226.156 96.1782 226.456 96.2982 226.516 96.5981 cv
cp
227.716 100.198 mo
228.316 102.058 li
228.436 102.298 228.316 102.538 228.016 102.658 cv
227.776 102.718 227.536 102.598 227.416 102.358 cv
226.816 100.498 li
226.756 100.258 226.876 100.018 227.116 99.8981 cv
227.356 99.8381 227.656 99.9581 227.716 100.198 cv
cp
228.976 103.858 mo
229.576 105.658 li
229.636 105.898 229.516 106.198 229.276 106.258 cv
229.036 106.378 228.736 106.198 228.676 105.958 cv
228.016 104.158 li
227.956 103.918 228.076 103.618 228.316 103.558 cv
228.616 103.438 228.856 103.618 228.976 103.858 cv
cp
229.636 106.258 mo
231.076 104.938 li
231.256 104.758 231.556 104.758 231.736 104.998 cv
231.916 105.178 231.916 105.478 231.736 105.658 cv
230.296 106.978 li
230.116 107.158 229.816 107.098 229.636 106.918 cv
229.456 106.738 229.456 106.438 229.636 106.258 cv
cp
232.516 103.678 mo
233.896 102.358 li
234.136 102.178 234.436 102.178 234.616 102.418 cv
234.796 102.598 234.736 102.898 234.556 103.078 cv
233.116 104.338 li
232.936 104.518 232.636 104.518 232.456 104.338 cv
232.276 104.158 232.276 103.858 232.516 103.678 cv
cp
235.336 101.038 mo
236.716 99.7781 li
236.956 99.5981 237.256 99.5981 237.436 99.7781 cv
237.616 100.018 237.616 100.318 237.376 100.498 cv
235.996 101.758 li
235.756 101.938 235.456 101.938 235.276 101.758 cv
235.096 101.518 235.156 101.218 235.336 101.038 cv
cp
238.156 98.4581 mo
239.596 97.1981 li
239.776 97.0181 240.076 97.0181 240.256 97.1981 cv
240.436 97.3781 240.436 97.6782 240.196 97.8582 cv
238.816 99.1782 li
238.636 99.3582 238.336 99.3582 238.156 99.1782 cv
237.976 98.9381 237.976 98.6381 238.156 98.4581 cv
cp
241.816 97.1981 mo
243.676 97.6181 li
243.916 97.6782 244.096 97.9182 244.036 98.2181 cv
243.976 98.4581 243.736 98.6381 243.436 98.5781 cv
241.576 98.1581 li
241.336 98.0981 241.156 97.7982 241.216 97.5581 cv
241.276 97.3181 241.516 97.1381 241.816 97.1981 cv
cp
245.536 98.0381 mo
247.396 98.4581 li
247.696 98.5181 247.816 98.7581 247.756 99.0581 cv
247.756 99.2982 247.456 99.4781 247.216 99.4182 cv
245.356 98.9981 li
245.056 98.9381 244.936 98.6981 244.996 98.3981 cv
245.056 98.1581 245.296 97.9781 245.536 98.0381 cv
cp
249.316 98.8781 mo
250.876 99.2382 li
250.876 99.2382 250.936 99.2382 250.936 99.2982 cv
251.236 99.4182 li
251.476 99.5381 251.596 99.8381 251.476 100.078 cv
251.356 100.318 251.056 100.378 250.816 100.258 cv
250.576 100.138 li
250.636 100.198 li
249.076 99.8381 li
248.836 99.7781 248.656 99.5381 248.716 99.2382 cv
248.776 98.9981 249.016 98.8181 249.316 98.8781 cv
cp
252.976 100.198 mo
254.716 101.038 li
254.956 101.158 255.076 101.398 254.956 101.638 cv
254.836 101.878 254.596 101.998 254.356 101.878 cv
252.556 101.098 li
252.316 100.978 252.256 100.678 252.376 100.438 cv
252.436 100.198 252.736 100.078 252.976 100.198 cv
cp
256.456 101.818 mo
258.196 102.598 li
258.436 102.718 258.556 103.018 258.436 103.258 cv
258.316 103.498 258.076 103.618 257.836 103.498 cv
256.096 102.718 li
255.856 102.598 255.736 102.298 255.856 102.058 cv
255.976 101.818 256.216 101.698 256.456 101.818 cv
cp
259.936 103.438 mo
261.616 104.218 li
261.136 104.278 li
261.136 104.218 li
261.376 104.038 261.676 104.038 261.856 104.278 cv
262.036 104.458 262.036 104.758 261.796 104.938 cv
261.736 104.998 li
261.616 105.118 261.436 105.178 261.256 105.058 cv
259.576 104.278 li
259.336 104.218 259.216 103.918 259.336 103.678 cv
259.456 103.438 259.696 103.318 259.936 103.438 cv
cp
262.576 102.958 mo
264.016 101.638 li
264.196 101.458 264.496 101.458 264.676 101.638 cv
264.856 101.878 264.856 102.178 264.616 102.358 cv
263.236 103.618 li
263.056 103.798 262.756 103.798 262.576 103.618 cv
262.396 103.438 262.396 103.138 262.576 102.958 cv
cp
265.396 100.318 mo
266.836 99.0581 li
267.016 98.8781 267.316 98.8781 267.496 99.0581 cv
267.676 99.2382 267.676 99.5381 267.436 99.7181 cv
266.056 101.038 li
265.876 101.218 265.576 101.218 265.396 100.978 cv
265.216 100.798 265.216 100.498 265.396 100.318 cv
cp
268.216 97.7382 mo
269.656 96.4182 li
269.836 96.2382 270.136 96.2382 270.316 96.4781 cv
270.496 96.6581 270.496 96.9581 270.316 97.1381 cv
268.876 98.4581 li
268.696 98.6381 268.396 98.5781 268.216 98.3981 cv
268.036 98.2181 268.036 97.9182 268.216 97.7382 cv
cp
271.036 95.0981 mo
271.756 94.4981 li
271.696 94.5581 li
272.236 93.7781 li
272.416 93.5381 272.716 93.4781 272.896 93.6581 cv
273.136 93.8381 273.196 94.1381 273.016 94.3181 cv
272.416 95.1581 li
272.416 95.1581 272.416 95.1581 272.356 95.2181 cv
271.696 95.8181 li
271.516 95.9981 271.216 95.9981 271.036 95.8181 cv
270.856 95.6381 270.856 95.2781 271.036 95.0981 cv
cp
273.376 92.2181 mo
274.516 90.6581 li
274.696 90.4182 274.996 90.4182 275.176 90.5381 cv
275.416 90.7181 275.476 91.0181 275.296 91.1981 cv
274.156 92.7581 li
273.976 92.9981 273.676 93.0581 273.496 92.8781 cv
273.256 92.6981 273.256 92.3981 273.376 92.2181 cv
cp
275.656 89.0981 mo
276.796 87.5381 li
276.916 87.3582 277.216 87.2982 277.456 87.4781 cv
277.636 87.5981 277.696 87.8981 277.576 88.1381 cv
276.436 89.6981 li
276.256 89.8781 275.956 89.9381 275.776 89.7581 cv
275.536 89.6381 275.476 89.3381 275.656 89.0981 cv
cp
277.936 85.9781 mo
279.016 84.4781 li
279.196 84.2382 279.496 84.1782 279.736 84.3582 cv
279.916 84.4781 279.976 84.7781 279.796 85.0181 cv
278.656 86.5781 li
278.536 86.7581 278.236 86.8181 277.996 86.6981 cv
277.816 86.5181 277.756 86.2181 277.936 85.9781 cv
cp
280.156 82.9182 mo
281.296 81.3582 li
281.476 81.1181 281.776 81.1181 281.956 81.2382 cv
282.196 81.4182 282.256 81.7181 282.076 81.8981 cv
280.936 83.4581 li
280.816 83.6981 280.516 83.7581 280.276 83.5781 cv
280.036 83.3981 280.036 83.0981 280.156 82.9182 cv
cp
282.376 79.7982 mo
283.396 78.1782 li
283.576 77.9381 283.816 77.8781 284.056 78.0581 cv
284.296 78.1782 284.356 78.4781 284.236 78.7181 cv
283.216 80.3381 li
283.096 80.5781 282.796 80.6381 282.556 80.4581 cv
282.316 80.3381 282.256 80.0381 282.376 79.7982 cv
cp
284.416 76.5581 mo
285.436 74.9381 li
285.556 74.6981 285.856 74.6381 286.096 74.7581 cv
286.336 74.9381 286.396 75.1782 286.276 75.4182 cv
285.256 77.0381 li
285.076 77.2781 284.776 77.3381 284.596 77.2181 cv
284.356 77.0981 284.296 76.7982 284.416 76.5581 cv
cp
286.456 73.3181 mo
287.476 71.6381 li
287.596 71.4581 287.896 71.3381 288.136 71.5181 cv
288.316 71.6381 288.436 71.9381 288.256 72.1782 cv
287.236 73.7982 li
287.116 74.0381 286.816 74.0981 286.576 73.9781 cv
286.396 73.7982 286.336 73.4981 286.456 73.3181 cv
cp
288.496 70.0181 mo
289.456 68.3981 li
289.636 68.1581 289.936 68.0981 290.116 68.2181 cv
290.356 68.3981 290.416 68.6981 290.296 68.8781 cv
289.276 70.5581 li
289.156 70.7382 288.856 70.8582 288.616 70.6782 cv
288.376 70.5581 288.316 70.2581 288.496 70.0181 cv
cp
290.476 66.7781 mo
291.496 65.1581 li
291.676 64.9182 291.976 64.8582 292.156 64.9781 cv
292.396 65.0981 292.456 65.3981 292.336 65.6381 cv
291.316 67.2581 li
291.196 67.4981 290.896 67.5581 290.656 67.4381 cv
290.416 67.3181 290.356 67.0181 290.476 66.7781 cv
cp
292.516 63.4781 mo
292.876 62.9381 li
292.876 62.8781 292.936 62.8781 292.936 62.8781 cv
293.716 61.9182 li
293.896 61.7382 294.196 61.7382 294.436 61.8582 cv
294.616 62.0381 294.616 62.3381 294.496 62.5781 cv
293.656 63.4781 li
293.716 63.4182 li
293.356 64.0181 li
293.176 64.2581 292.876 64.3181 292.696 64.1381 cv
292.456 64.0181 292.396 63.7181 292.516 63.4781 cv
cp
294.976 60.4781 mo
296.236 59.0381 li
296.416 58.8582 296.716 58.7982 296.956 58.9781 cv
297.136 59.1581 297.136 59.4581 297.016 59.6981 cv
295.756 61.1381 li
295.576 61.3181 295.276 61.3181 295.036 61.1381 cv
294.856 60.9581 294.856 60.6581 294.976 60.4781 cv
cp
297.556 57.5981 mo
298.816 56.1581 li
298.936 55.9182 299.296 55.9182 299.476 56.0981 cv
299.656 56.2781 299.716 56.5781 299.536 56.7581 cv
298.276 58.1981 li
298.096 58.4381 297.796 58.4381 297.556 58.2581 cv
297.376 58.0781 297.376 57.7781 297.556 57.5981 cv
cp
300.076 54.7181 mo
301.336 53.2781 li
301.516 53.0381 301.816 53.0381 301.996 53.2181 cv
302.176 53.3981 302.236 53.6981 302.056 53.8781 cv
300.796 55.3181 li
300.616 55.4981 300.316 55.5581 300.076 55.3781 cv
299.896 55.1981 299.896 54.8981 300.076 54.7181 cv
cp
302.596 51.7781 mo
303.556 50.6981 li
303.616 50.5781 303.736 50.5781 303.796 50.5181 cv
304.216 50.4581 li
304.456 50.3981 304.756 50.5181 304.816 50.8181 cv
304.876 51.0581 304.696 51.2982 304.456 51.3582 cv
304.036 51.4781 li
304.276 51.2982 li
303.316 52.4381 li
303.136 52.6181 302.836 52.6781 302.596 52.4981 cv
302.416 52.3181 302.416 52.0181 302.596 51.7781 cv
cp
306.076 49.9781 mo
307.996 49.5581 li
308.236 49.4981 308.476 49.6781 308.536 49.9182 cv
308.596 50.1581 308.416 50.4581 308.176 50.5181 cv
306.316 50.9381 li
306.076 50.9981 305.776 50.8181 305.716 50.5781 cv
305.656 50.3381 305.836 50.0381 306.076 49.9781 cv
cp
309.856 49.1381 mo
311.716 48.7181 li
311.956 48.6581 312.196 48.7781 312.256 49.0781 cv
312.316 49.3181 312.196 49.5581 311.956 49.6181 cv
310.036 50.0381 li
309.796 50.0981 309.556 49.9781 309.496 49.6781 cv
309.436 49.4381 309.556 49.1981 309.856 49.1381 cv
cp
313.576 48.2382 mo
314.416 48.0581 li
314.116 48.2982 li
314.656 47.3981 li
314.836 47.1581 315.136 47.0981 315.316 47.2181 cv
315.556 47.3981 315.616 47.6981 315.496 47.8781 cv
314.956 48.7781 li
314.896 48.8981 314.776 48.9581 314.656 49.0181 cv
313.816 49.1981 li
313.516 49.2581 313.276 49.0781 313.216 48.8381 cv
313.156 48.5981 313.336 48.2982 313.576 48.2382 cv
cp
315.676 45.7781 mo
316.696 44.1581 li
316.876 43.9182 317.176 43.8582 317.356 43.9781 cv
317.596 44.0981 317.656 44.3981 317.536 44.6381 cv
316.516 46.2581 li
316.396 46.4981 316.096 46.5581 315.856 46.4381 cv
315.616 46.2581 315.556 45.9581 315.676 45.7781 cv
cp
317.716 42.4781 mo
318.736 40.8582 li
318.856 40.6181 319.156 40.5581 319.396 40.7382 cv
319.636 40.8582 319.696 41.1581 319.576 41.3981 cv
318.556 43.0181 li
318.376 43.2581 318.136 43.3181 317.896 43.1381 cv
317.656 43.0181 317.596 42.7181 317.716 42.4781 cv
cp
319.756 39.2382 mo
320.776 37.6181 li
320.896 37.3781 321.196 37.3181 321.436 37.4381 cv
321.676 37.6181 321.736 37.9182 321.616 38.0981 cv
320.596 39.7781 li
320.416 39.9581 320.116 40.0181 319.936 39.8981 cv
319.696 39.7781 319.636 39.4781 319.756 39.2382 cv
cp
321.796 35.9981 mo
322.816 34.3781 li
322.936 34.1381 323.236 34.0781 323.476 34.1981 cv
323.716 34.3181 323.776 34.6181 323.596 34.8582 cv
322.636 36.4781 li
322.456 36.7181 322.156 36.7781 321.916 36.6581 cv
321.736 36.4781 321.676 36.2382 321.796 35.9981 cv
cp
323.836 32.6981 mo
324.736 31.2581 li
324.856 31.0781 li
325.036 30.8381 325.336 30.8381 325.516 30.9581 cv
325.756 31.1381 325.816 31.4381 325.636 31.6181 cv
325.576 31.7382 li
324.616 33.2382 li
324.496 33.4781 324.196 33.5381 323.956 33.3582 cv
323.776 33.2382 323.656 32.9381 323.836 32.6981 cv
cp
325.996 29.5181 mo
327.136 27.9581 li
327.256 27.7781 327.556 27.7181 327.796 27.8381 cv
328.036 28.0181 328.036 28.3181 327.916 28.5581 cv
326.776 30.0581 li
326.596 30.2982 326.296 30.3582 326.116 30.1781 cv
325.876 30.0581 325.816 29.7581 325.996 29.5181 cv
cp
328.276 26.3981 mo
329.356 24.8381 li
329.536 24.6581 329.836 24.5981 330.076 24.7781 cv
330.256 24.8981 330.316 25.1981 330.136 25.4381 cv
329.056 26.9981 li
328.876 27.1781 328.576 27.2382 328.336 27.0581 cv
328.156 26.9381 328.096 26.6381 328.276 26.3981 cv
cp
330.496 23.2781 mo
331.636 21.7781 li
331.816 21.5381 332.116 21.4781 332.296 21.6581 cv
332.536 21.7781 332.536 22.0781 332.416 22.3181 cv
331.276 23.8781 li
331.096 24.0581 330.796 24.1181 330.616 23.9981 cv
330.376 23.8181 330.376 23.5181 330.496 23.2781 cv
cp
332.776 20.2181 mo
333.916 18.6581 li
334.036 18.4182 334.336 18.3582 334.576 18.5381 cv
334.756 18.7181 334.816 19.0181 334.636 19.1981 cv
333.556 20.7581 li
333.376 20.9981 333.076 20.9981 332.836 20.8781 cv
332.656 20.6981 332.596 20.3981 332.776 20.2181 cv
cp
334.996 17.0981 mo
335.356 16.5581 li
335.536 16.3781 335.836 16.3181 336.076 16.4381 cv
336.256 16.6181 336.316 16.9182 336.136 17.1581 cv
335.776 17.6381 li
335.656 17.8781 335.356 17.9381 335.116 17.7581 cv
334.876 17.5781 334.876 17.2781 334.996 17.0981 cv
0 0 0 1 cmyk
f
17.2956 87.1181 mo
27.9156 94.4381 li
27.4956 94.3781 li
38.1156 91.9781 li
48.7356 89.5181 li
48.6756 89.5781 li
59.2956 84.7181 li
59.3556 84.6581 59.4156 84.6581 59.5356 84.6581 cv
70.1556 85.8582 li
69.9156 85.8582 li
80.5956 82.1981 li
91.2756 79.0181 li
91.4556 78.9581 91.6956 79.0781 91.8156 79.2581 cv
102.436 96.1181 li
101.776 95.9381 li
112.396 90.5381 li
123.076 85.9182 li
123.136 85.8582 123.256 85.8582 123.376 85.8582 cv
133.996 88.7982 li
144.616 91.9781 li
144.436 91.9781 li
155.056 90.2382 li
155.116 90.2382 155.176 90.2382 155.176 90.2382 cv
165.856 92.2181 li
165.916 92.2181 165.916 92.2181 165.976 92.2781 cv
176.596 96.4182 li
176.056 96.4781 li
186.676 85.2581 li
186.796 85.1981 186.856 85.1381 186.976 85.1381 cv
197.596 84.4182 li
197.416 84.4781 li
208.036 79.3181 li
208.156 79.2581 208.276 79.2581 208.396 79.2581 cv
219.016 81.5981 li
218.596 81.7181 li
229.216 72.5981 li
229.216 72.5381 229.276 72.5381 229.336 72.5381 cv
239.956 67.6181 li
239.956 67.5581 240.016 67.5581 240.016 67.5581 cv
250.636 65.1581 li
250.756 65.1581 250.816 65.1581 250.936 65.1581 cv
261.616 68.8181 li
261.616 68.8781 261.616 68.8781 261.676 68.8781 cv
272.296 74.9381 li
272.356 74.9981 li
282.976 85.0181 li
282.616 84.8981 li
293.236 83.3981 li
303.856 81.7181 li
314.416 79.4981 li
314.596 79.4981 314.776 79.4981 314.896 79.6181 cv
325.516 90.1181 li
325.096 89.9981 li
335.716 89.0381 li
336.016 89.0381 336.256 89.2181 336.256 89.4581 cv
336.256 89.7581 336.076 89.9981 335.836 89.9981 cv
325.216 90.9581 li
325.036 90.9581 324.916 90.8981 324.796 90.8381 cv
314.176 80.3381 li
314.656 80.4581 li
303.976 82.6782 li
293.356 84.3582 li
282.736 85.8582 li
282.616 85.8582 282.436 85.7982 282.316 85.7382 cv
271.696 75.7181 li
271.816 75.7781 li
261.196 69.7181 li
261.256 69.7781 li
250.576 66.1181 li
250.876 66.1181 li
240.256 68.5181 li
240.316 68.4581 li
229.696 73.3781 li
229.816 73.3181 li
219.196 82.4381 li
219.076 82.5581 218.956 82.5581 218.776 82.5581 cv
208.156 80.2181 li
208.456 80.1581 li
197.836 85.3181 li
197.836 85.3781 197.776 85.3781 197.716 85.3781 cv
187.096 86.0981 li
187.396 85.9182 li
176.776 97.1381 li
176.656 97.3181 176.416 97.3781 176.236 97.2581 cv
165.616 93.1181 li
165.736 93.1782 li
155.056 91.1981 li
155.176 91.1981 li
144.556 92.9381 li
144.496 92.9381 144.436 92.9381 144.376 92.9381 cv
133.756 89.7581 li
123.136 86.8181 li
123.436 86.7581 li
112.876 91.3781 li
102.256 96.7781 li
102.016 96.8981 101.716 96.8381 101.596 96.5981 cv
90.9756 79.7382 li
91.5156 79.9781 li
80.9556 83.1581 li
70.2756 86.8181 li
70.1556 86.8181 70.0956 86.8181 70.0356 86.8181 cv
59.4156 85.6181 li
59.6556 85.5581 li
49.0356 90.4182 li
48.9756 90.4781 li
38.3556 92.9381 li
27.7356 95.3381 li
27.6156 95.3381 27.4356 95.3381 27.3156 95.2781 cv
16.6956 87.9581 li
16.5156 87.7781 16.4556 87.4781 16.5756 87.2382 cv
16.7556 87.0581 17.0556 86.9981 17.2956 87.1181 cv
.190097 .83154 .718898 .0656443 cmyk
f
grestore
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: RAMBAA+Calibri Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin
18 dict begin
/CIDFontName /RAMBAA+Calibri def
/PaintType 0 def
/FontType 42 def
/CIDFontType 2 def
/GDBytes 2 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontMatrix [1 0 0 1 0 0] def
/FontBBox [-4.023 -2.5 9.922 8.211] def
/CIDCount 6442 def
/CDevProc {pop pop pop pop pop 0 -1 7 index 2 div .88}bind def
/CharStrings 1 dict dup begin /.notdef 0 def end def
/Encoding 1 array dup 0 /.notdef put readonly def
/CIDMap [
<0000000100020003000400050006000700080009000a000b000c000d000e
000f0010001100120013001400150016001700180019001a001b001c001d
001e001f0020002100220023002400250026002700280029002a002b002c
002d002e002f0030003100320033003400350036003700380039003a003b
003c003d003e003f0040004100420043004400450046004700480049004a
004b004c004d004e004f0050005100520053005400550056005700580059
005a005b005c005d005e005f006000610062006300640065006600670068
0069006a006b006c006d006e006f00700071007200730074007500760077
00780079007a007b007c007d007e007f0080008100820083008400850086
008700880089008a008b008c008d008e008f009000910092009300940095
0096009700980099009a009b009c009d009e009f00a000a100a200a300a4
00a500a600a700a800a900aa00ab00ac00ad00ae00af00b000b100b200b3
00b400b500b600b700b800b900ba00bb00bc00bd00be00bf00c000c100c2
00c300c400c500c600c700c800c900ca00cb00cc00cd00ce00cf00d000d1
00d200d300d400d500d600d700d800d900da00db00dc00dd00de00df00e0
00e100e200e300e400e500e600e700e800e900ea00eb00ec00ed00ee00ef
00f000f100f200f300f400f500f600f700f800f900fa00fb00fc00fd00fe
00ff0100010101020103010401050106010701080109010a010b010c010d
010e010f0110011101120113011401150116011701180119011a011b011c
011d011e011f0120012101220123012401250126012701280129012a012b
012c012d012e012f0130013101320133013401350136013701380139013a
013b013c013d013e013f0140014101420143014401450146014701480149
014a014b014c014d014e014f015001510152015301540155015601570158
0159015a015b015c015d015e015f01600161016201630164016501660167
01680169016a016b016c016d016e016f0170017101720173017401750176
017701780179017a017b017c017d017e017f018001810182018301840185
0186018701880189018a018b018c018d018e018f01900191019201930194
01950196019701980199019a019b019c019d019e019f01a001a101a201a3
01a401a501a601a701a801a901aa01ab01ac01ad01ae01af01b001b101b2
01b301b401b501b601b701b801b901ba01bb01bc01bd01be01bf01c001c1
01c201c301c401c501c601c701c801c901ca01cb01cc01cd01ce01cf01d0
01d101d201d301d401d501d601d701d801d901da01db01dc01dd01de01df
01e001e101e201e301e401e501e601e701e801e901ea01eb01ec01ed01ee
01ef01f001f101f201f301f401f501f601f701f801f901fa01fb01fc01fd
01fe01ff0200020102020203020402050206020702080209020a020b020c
020d020e020f0210021102120213021402150216021702180219021a021b
021c021d021e021f0220022102220223022402250226022702280229022a
022b022c022d022e022f0230023102320233023402350236023702380239
023a023b023c023d023e023f024002410242024302440245024602470248
0249024a024b024c024d024e024f02500251025202530254025502560257
02580259025a025b025c025d025e025f0260026102620263026402650266
026702680269026a026b026c026d026e026f027002710272027302740275
0276027702780279027a027b027c027d027e027f02800281028202830284
02850286028702880289028a028b028c028d028e028f0290029102920293
029402950296029702980299029a029b029c029d029e029f02a002a102a2
02a302a402a502a602a702a802a902aa02ab02ac02ad02ae02af02b002b1
02b202b302b402b502b602b702b802b902ba02bb02bc02bd02be02bf02c0
02c102c202c302c402c502c602c702c802c902ca02cb02cc02cd02ce02cf
02d002d102d202d302d402d502d602d702d802d902da02db02dc02dd02de
02df02e002e102e202e302e402e502e602e702e802e902ea02eb02ec02ed
02ee02ef02f002f102f202f302f402f502f602f702f802f902fa02fb02fc
02fd02fe02ff0300030103020303030403050306030703080309030a030b
030c030d030e030f0310031103120313031403150316031703180319031a
031b031c031d031e031f0320032103220323032403250326032703280329
032a032b032c032d032e032f033003310332033303340335033603370338
0339033a033b033c033d033e033f03400341034203430344034503460347
03480349034a034b034c034d034e034f0350035103520353035403550356
035703580359035a035b035c035d035e035f036003610362036303640365
0366036703680369036a036b036c036d036e036f03700371037203730374
03750376037703780379037a037b037c037d037e037f0380038103820383
038403850386038703880389038a038b038c038d038e038f039003910392
0393039403950396039703980399039a039b039c039d039e039f03a003a1
03a203a303a403a503a603a703a803a903aa03ab03ac03ad03ae03af03b0
03b103b203b303b403b503b603b703b803b903ba03bb03bc03bd03be03bf
03c003c103c203c303c403c503c603c703c803c903ca03cb03cc03cd03ce
03cf03d003d103d203d303d403d503d603d703d803d903da03db03dc03dd
03de03df03e003e103e203e303e403e503e603e703e803e903ea03eb03ec
03ed03ee03ef03f003f103f203f303f403f503f603f703f803f903fa03fb
03fc03fd03fe03ff0400040104020403040404050406040704080409040a
040b040c040d040e040f0410041104120413041404150416041704180419
041a041b041c041d041e041f042004210422042304240425042604270428
0429042a042b042c042d042e042f04300431043204330434043504360437
04380439043a043b043c043d043e043f0440044104420443044404450446
044704480449044a044b044c044d044e044f045004510452045304540455
0456045704580459045a045b045c045d045e045f04600461046204630464
04650466046704680469046a046b046c046d046e046f0470047104720473
047404750476047704780479047a047b047c047d047e047f048004810482
0483048404850486048704880489048a048b048c048d048e048f04900491
04920493049404950496049704980499049a049b049c049d049e049f04a0
04a104a204a304a404a504a604a704a804a904aa04ab04ac04ad04ae04af
04b004b104b204b304b404b504b604b704b804b904ba04bb04bc04bd04be
04bf04c004c104c204c304c404c504c604c704c804c904ca04cb04cc04cd
04ce04cf04d004d104d204d304d404d504d604d704d804d904da04db04dc
04dd04de04df04e004e104e204e304e404e504e604e704e804e904ea04eb
04ec04ed04ee04ef04f004f104f204f304f404f504f604f704f804f904fa
04fb04fc04fd04fe04ff0500050105020503050405050506050705080509
050a050b050c050d050e050f051005110512051305140515051605170518
0519051a051b051c051d051e051f05200521052205230524052505260527
05280529052a052b052c052d052e052f0530053105320533053405350536
053705380539053a053b053c053d053e053f054005410542054305440545
0546054705480549054a054b054c054d054e054f05500551055205530554
05550556055705580559055a055b055c055d055e055f0560056105620563
056405650566056705680569056a056b056c056d056e056f057005710572
0573057405750576057705780579057a057b057c057d057e057f05800581
05820583058405850586058705880589058a058b058c058d058e058f0590
059105920593059405950596059705980599059a059b059c059d059e059f
05a005a105a205a305a405a505a605a705a805a905aa05ab05ac05ad05ae
05af05b005b105b205b305b405b505b605b705b805b905ba05bb05bc05bd
05be05bf05c005c105c205c305c405c505c605c705c805c905ca05cb05cc
05cd05ce05cf05d005d105d205d305d405d505d605d705d805d905da05db
05dc05dd05de05df05e005e105e205e305e405e505e605e705e805e905ea
05eb05ec05ed05ee05ef05f005f105f205f305f405f505f605f705f805f9
05fa05fb05fc05fd05fe05ff060006010602060306040605060606070608
0609060a060b060c060d060e060f06100611061206130614061506160617
06180619061a061b061c061d061e061f0620062106220623062406250626
062706280629062a062b062c062d062e062f063006310632063306340635
0636063706380639063a063b063c063d063e063f06400641064206430644
06450646064706480649064a064b064c064d064e064f0650065106520653
065406550656065706580659065a065b065c065d065e065f066006610662
0663066406650666066706680669066a066b066c066d066e066f06700671
06720673067406750676067706780679067a067b067c067d067e067f0680
068106820683068406850686068706880689068a068b068c068d068e068f
0690069106920693069406950696069706980699069a069b069c069d069e
069f06a006a106a206a306a406a506a606a706a806a906aa06ab06ac06ad
06ae06af06b006b106b206b306b406b506b606b706b806b906ba06bb06bc
06bd06be06bf06c006c106c206c306c406c506c606c706c806c906ca06cb
06cc06cd06ce06cf06d006d106d206d306d406d506d606d706d806d906da
06db06dc06dd06de06df06e006e106e206e306e406e506e606e706e806e9
06ea06eb06ec06ed06ee06ef06f006f106f206f306f406f506f606f706f8
06f906fa06fb06fc06fd06fe06ff07000701070207030704070507060707
07080709070a070b070c070d070e070f0710071107120713071407150716
071707180719071a071b071c071d071e071f072007210722072307240725
0726072707280729072a072b072c072d072e072f07300731073207330734
07350736073707380739073a073b073c073d073e073f0740074107420743
074407450746074707480749074a074b074c074d074e074f075007510752
0753075407550756075707580759075a075b075c075d075e075f07600761
07620763076407650766076707680769076a076b076c076d076e076f0770
077107720773077407750776077707780779077a077b077c077d077e077f
0780078107820783078407850786078707880789078a078b078c078d078e
078f0790079107920793079407950796079707980799079a079b079c079d
079e079f07a007a107a207a307a407a507a607a707a807a907aa07ab07ac
07ad07ae07af07b007b107b207b307b407b507b607b707b807b907ba07bb
07bc07bd07be07bf07c007c107c207c307c407c507c607c707c807c907ca
07cb07cc07cd07ce07cf07d007d107d207d307d407d507d607d707d807d9
07da07db07dc07dd07de07df07e007e107e207e307e407e507e607e707e8
07e907ea07eb07ec07ed07ee07ef07f007f107f207f307f407f507f607f7
07f807f907fa07fb07fc07fd07fe07ff0800080108020803080408050806
080708080809080a080b080c080d080e080f081008110812081308140815
0816081708180819081a081b081c081d081e081f08200821082208230824
08250826082708280829082a082b082c082d082e082f0830083108320833
083408350836083708380839083a083b083c083d083e083f084008410842
0843084408450846084708480849084a084b084c084d084e084f08500851
08520853085408550856085708580859085a085b085c085d085e085f0860
086108620863086408650866086708680869086a086b086c086d086e086f
0870087108720873087408750876087708780879087a087b087c087d087e
087f0880088108820883088408850886088708880889088a088b088c088d
088e088f0890089108920893089408950896089708980899089a089b089c
089d089e089f08a008a108a208a308a408a508a608a708a808a908aa08ab
08ac08ad08ae08af08b008b108b208b308b408b508b608b708b808b908ba
08bb08bc08bd08be08bf08c008c108c208c308c408c508c608c708c808c9
08ca08cb08cc08cd08ce08cf08d008d108d208d308d408d508d608d708d8
08d908da08db08dc08dd08de08df08e008e108e208e308e408e508e608e7
08e808e908ea08eb08ec08ed08ee08ef08f008f108f208f308f408f508f6
08f708f808f908fa08fb08fc08fd08fe08ff090009010902090309040905
0906090709080909090a090b090c090d090e090f09100911091209130914
09150916091709180919091a091b091c091d091e091f0920092109220923
092409250926092709280929092a092b092c092d092e092f093009310932
0933093409350936093709380939093a093b093c093d093e093f09400941
09420943094409450946094709480949094a094b094c094d094e094f0950
095109520953095409550956095709580959095a095b095c095d095e095f
0960096109620963096409650966096709680969096a096b096c096d096e
096f0970097109720973097409750976097709780979097a097b097c097d
097e097f0980098109820983098409850986098709880989098a098b098c
098d098e098f0990099109920993099409950996099709980999099a099b
099c099d099e099f09a009a109a209a309a409a509a609a709a809a909aa
09ab09ac09ad09ae09af09b009b109b209b309b409b509b609b709b809b9
09ba09bb09bc09bd09be09bf09c009c109c209c309c409c509c609c709c8
09c909ca09cb09cc09cd09ce09cf09d009d109d209d309d409d509d609d7
09d809d909da09db09dc09dd09de09df09e009e109e209e309e409e509e6
09e709e809e909ea09eb09ec09ed09ee09ef09f009f109f209f309f409f5
09f609f709f809f909fa09fb09fc09fd09fe09ff0a000a010a020a030a04
0a050a060a070a080a090a0a0a0b0a0c0a0d0a0e0a0f0a100a110a120a13
0a140a150a160a170a180a190a1a0a1b0a1c0a1d0a1e0a1f0a200a210a22
0a230a240a250a260a270a280a290a2a0a2b0a2c0a2d0a2e0a2f0a300a31
0a320a330a340a350a360a370a380a390a3a0a3b0a3c0a3d0a3e0a3f0a40
0a410a420a430a440a450a460a470a480a490a4a0a4b0a4c0a4d0a4e0a4f
0a500a510a520a530a540a550a560a570a580a590a5a0a5b0a5c0a5d0a5e
0a5f0a600a610a620a630a640a650a660a670a680a690a6a0a6b0a6c0a6d
0a6e0a6f0a700a710a720a730a740a750a760a770a780a790a7a0a7b0a7c
0a7d0a7e0a7f0a800a810a820a830a840a850a860a870a880a890a8a0a8b
0a8c0a8d0a8e0a8f0a900a910a920a930a940a950a960a970a980a990a9a
0a9b0a9c0a9d0a9e0a9f0aa00aa10aa20aa30aa40aa50aa60aa70aa80aa9
0aaa0aab0aac0aad0aae0aaf0ab00ab10ab20ab30ab40ab50ab60ab70ab8
0ab90aba0abb0abc0abd0abe0abf0ac00ac10ac20ac30ac40ac50ac60ac7
0ac80ac90aca0acb0acc0acd0ace0acf0ad00ad10ad20ad30ad40ad50ad6
0ad70ad80ad90ada0adb0adc0add0ade0adf0ae00ae10ae20ae30ae40ae5
0ae60ae70ae80ae90aea0aeb0aec0aed0aee0aef0af00af10af20af30af4
0af50af60af70af80af90afa0afb0afc0afd0afe0aff0b000b010b020b03
0b040b050b060b070b080b090b0a0b0b0b0c0b0d0b0e0b0f0b100b110b12
0b130b140b150b160b170b180b190b1a0b1b0b1c0b1d0b1e0b1f0b200b21
0b220b230b240b250b260b270b280b290b2a0b2b0b2c0b2d0b2e0b2f0b30
0b310b320b330b340b350b360b370b380b390b3a0b3b0b3c0b3d0b3e0b3f
0b400b410b420b430b440b450b460b470b480b490b4a0b4b0b4c0b4d0b4e
0b4f0b500b510b520b530b540b550b560b570b580b590b5a0b5b0b5c0b5d
0b5e0b5f0b600b610b620b630b640b650b660b670b680b690b6a0b6b0b6c
0b6d0b6e0b6f0b700b710b720b730b740b750b760b770b780b790b7a0b7b
0b7c0b7d0b7e0b7f0b800b810b820b830b840b850b860b870b880b890b8a
0b8b0b8c0b8d0b8e0b8f0b900b910b920b930b940b950b960b970b980b99
0b9a0b9b0b9c0b9d0b9e0b9f0ba00ba10ba20ba30ba40ba50ba60ba70ba8
0ba90baa0bab0bac0bad0bae0baf0bb00bb10bb20bb30bb40bb50bb60bb7
0bb80bb90bba0bbb0bbc0bbd0bbe0bbf0bc00bc10bc20bc30bc40bc50bc6
0bc70bc80bc90bca0bcb0bcc0bcd0bce0bcf0bd00bd10bd20bd30bd40bd5
0bd60bd70bd80bd90bda0bdb0bdc0bdd0bde0bdf0be00be10be20be30be4
0be50be60be70be80be90bea0beb0bec0bed0bee0bef0bf00bf10bf20bf3
0bf40bf50bf60bf70bf80bf90bfa0bfb0bfc0bfd0bfe0bff0c000c010c02
0c030c040c050c060c070c080c090c0a0c0b0c0c0c0d0c0e0c0f0c100c11
0c120c130c140c150c160c170c180c190c1a0c1b0c1c0c1d0c1e0c1f0c20
0c210c220c230c240c250c260c270c280c290c2a0c2b0c2c0c2d0c2e0c2f
0c300c310c320c330c340c350c360c370c380c390c3a0c3b0c3c0c3d0c3e
0c3f0c400c410c420c430c440c450c460c470c480c490c4a0c4b0c4c0c4d
0c4e0c4f0c500c510c520c530c540c550c560c570c580c590c5a0c5b0c5c
0c5d0c5e0c5f0c600c610c620c630c640c650c660c670c680c690c6a0c6b
0c6c0c6d0c6e0c6f0c700c710c720c730c740c750c760c770c780c790c7a
0c7b0c7c0c7d0c7e0c7f0c800c810c820c830c840c850c860c870c880c89
0c8a0c8b0c8c0c8d0c8e0c8f0c900c910c920c930c940c950c960c970c98
0c990c9a0c9b0c9c0c9d0c9e0c9f0ca00ca10ca20ca30ca40ca50ca60ca7
0ca80ca90caa0cab0cac0cad0cae0caf0cb00cb10cb20cb30cb40cb50cb6
0cb70cb80cb90cba0cbb0cbc0cbd0cbe0cbf0cc00cc10cc20cc30cc40cc5
0cc60cc70cc80cc90cca0ccb0ccc0ccd0cce0ccf0cd00cd10cd20cd30cd4
0cd50cd60cd70cd80cd90cda0cdb0cdc0cdd0cde0cdf0ce00ce10ce20ce3
0ce40ce50ce60ce70ce80ce90cea0ceb0cec0ced0cee0cef0cf00cf10cf2
0cf30cf40cf50cf60cf70cf80cf90cfa0cfb0cfc0cfd0cfe0cff0d000d01
0d020d030d040d050d060d070d080d090d0a0d0b0d0c0d0d0d0e0d0f0d10
0d110d120d130d140d150d160d170d180d190d1a0d1b0d1c0d1d0d1e0d1f
0d200d210d220d230d240d250d260d270d280d290d2a0d2b0d2c0d2d0d2e
0d2f0d300d310d320d330d340d350d360d370d380d390d3a0d3b0d3c0d3d
0d3e0d3f0d400d410d420d430d440d450d460d470d480d490d4a0d4b0d4c
0d4d0d4e0d4f0d500d510d520d530d540d550d560d570d580d590d5a0d5b
0d5c0d5d0d5e0d5f0d600d610d620d630d640d650d660d670d680d690d6a
0d6b0d6c0d6d0d6e0d6f0d700d710d720d730d740d750d760d770d780d79
0d7a0d7b0d7c0d7d0d7e0d7f0d800d810d820d830d840d850d860d870d88
0d890d8a0d8b0d8c0d8d0d8e0d8f0d900d910d920d930d940d950d960d97
0d980d990d9a0d9b0d9c0d9d0d9e0d9f0da00da10da20da30da40da50da6
0da70da80da90daa0dab0dac0dad0dae0daf0db00db10db20db30db40db5
0db60db70db80db90dba0dbb0dbc0dbd0dbe0dbf0dc00dc10dc20dc30dc4
0dc50dc60dc70dc80dc90dca0dcb0dcc0dcd0dce0dcf0dd00dd10dd20dd3
0dd40dd50dd60dd70dd80dd90dda0ddb0ddc0ddd0dde0ddf0de00de10de2
0de30de40de50de60de70de80de90dea0deb0dec0ded0dee0def0df00df1
0df20df30df40df50df60df70df80df90dfa0dfb0dfc0dfd0dfe0dff0e00
0e010e020e030e040e050e060e070e080e090e0a0e0b0e0c0e0d0e0e0e0f
0e100e110e120e130e140e150e160e170e180e190e1a0e1b0e1c0e1d0e1e
0e1f0e200e210e220e230e240e250e260e270e280e290e2a0e2b0e2c0e2d
0e2e0e2f0e300e310e320e330e340e350e360e370e380e390e3a0e3b0e3c
0e3d0e3e0e3f0e400e410e420e430e440e450e460e470e480e490e4a0e4b
0e4c0e4d0e4e0e4f0e500e510e520e530e540e550e560e570e580e590e5a
0e5b0e5c0e5d0e5e0e5f0e600e610e620e630e640e650e660e670e680e69
0e6a0e6b0e6c0e6d0e6e0e6f0e700e710e720e730e740e750e760e770e78
0e790e7a0e7b0e7c0e7d0e7e0e7f0e800e810e820e830e840e850e860e87
0e880e890e8a0e8b0e8c0e8d0e8e0e8f0e900e910e920e930e940e950e96
0e970e980e990e9a0e9b0e9c0e9d0e9e0e9f0ea00ea10ea20ea30ea40ea5
0ea60ea70ea80ea90eaa0eab0eac0ead0eae0eaf0eb00eb10eb20eb30eb4
0eb50eb60eb70eb80eb90eba0ebb0ebc0ebd0ebe0ebf0ec00ec10ec20ec3
0ec40ec50ec60ec70ec80ec90eca0ecb0ecc0ecd0ece0ecf0ed00ed10ed2
0ed30ed40ed50ed60ed70ed80ed90eda0edb0edc0edd0ede0edf0ee00ee1
0ee20ee30ee40ee50ee60ee70ee80ee90eea0eeb0eec0eed0eee0eef0ef0
0ef10ef20ef30ef40ef50ef60ef70ef80ef90efa0efb0efc0efd0efe0eff
0f000f010f020f030f040f050f060f070f080f090f0a0f0b0f0c0f0d0f0e
0f0f0f100f110f120f130f140f150f160f170f180f190f1a0f1b0f1c0f1d
0f1e0f1f0f200f210f220f230f240f250f260f270f280f290f2a0f2b0f2c
0f2d0f2e0f2f0f300f310f320f330f340f350f360f370f380f390f3a0f3b
0f3c0f3d0f3e0f3f0f400f410f420f430f440f450f460f470f480f490f4a
0f4b0f4c0f4d0f4e0f4f0f500f510f520f530f540f550f560f570f580f59
0f5a0f5b0f5c0f5d0f5e0f5f0f600f610f620f630f640f650f660f670f68
0f690f6a0f6b0f6c0f6d0f6e0f6f0f700f710f720f730f740f750f760f77
0f780f790f7a0f7b0f7c0f7d0f7e0f7f0f800f810f820f830f840f850f86
0f870f880f890f8a0f8b0f8c0f8d0f8e0f8f0f900f910f920f930f940f95
0f960f970f980f990f9a0f9b0f9c0f9d0f9e0f9f0fa00fa10fa20fa30fa4
0fa50fa60fa70fa80fa90faa0fab0fac0fad0fae0faf0fb00fb10fb20fb3
0fb40fb50fb60fb70fb80fb90fba0fbb0fbc0fbd0fbe0fbf0fc00fc10fc2
0fc30fc40fc50fc60fc70fc80fc90fca0fcb0fcc0fcd0fce0fcf0fd00fd1
0fd20fd30fd40fd50fd60fd70fd80fd90fda0fdb0fdc0fdd0fde0fdf0fe0
0fe10fe20fe30fe40fe50fe60fe70fe80fe90fea0feb0fec0fed0fee0fef
0ff00ff10ff20ff30ff40ff50ff60ff70ff80ff90ffa0ffb0ffc0ffd0ffe
0fff1000100110021003100410051006100710081009100a100b100c100d
100e100f1010101110121013101410151016101710181019101a101b101c
101d101e101f1020102110221023102410251026102710281029102a102b
102c102d102e102f1030103110321033103410351036103710381039103a
103b103c103d103e103f1040104110421043104410451046104710481049
104a104b104c104d104e104f105010511052105310541055105610571058
1059105a105b105c105d105e105f10601061106210631064106510661067
10681069106a106b106c106d106e106f1070107110721073107410751076
107710781079107a107b107c107d107e107f108010811082108310841085
1086108710881089108a108b108c108d108e108f10901091109210931094
10951096109710981099109a109b109c109d109e109f10a010a110a210a3
10a410a510a610a710a810a910aa10ab10ac10ad10ae10af10b010b110b2
10b310b410b510b610b710b810b910ba10bb10bc10bd10be10bf10c010c1
10c210c310c410c510c610c710c810c910ca10cb10cc10cd10ce10cf10d0
10d110d210d310d410d510d610d710d810d910da10db10dc10dd10de10df
10e010e110e210e310e410e510e610e710e810e910ea10eb10ec10ed10ee
10ef10f010f110f210f310f410f510f610f710f810f910fa10fb10fc10fd
10fe10ff1100110111021103110411051106110711081109110a110b110c
110d110e110f1110111111121113111411151116111711181119111a111b
111c111d111e111f1120112111221123112411251126112711281129112a
112b112c112d112e112f1130113111321133113411351136113711381139
113a113b113c113d113e113f114011411142114311441145114611471148
1149114a114b114c114d114e114f11501151115211531154115511561157
11581159115a115b115c115d115e115f1160116111621163116411651166
116711681169116a116b116c116d116e116f117011711172117311741175
1176117711781179117a117b117c117d117e117f11801181118211831184
11851186118711881189118a118b118c118d118e118f1190119111921193
119411951196119711981199119a119b119c119d119e119f11a011a111a2
11a311a411a511a611a711a811a911aa11ab11ac11ad11ae11af11b011b1
11b211b311b411b511b611b711b811b911ba11bb11bc11bd11be11bf11c0
11c111c211c311c411c511c611c711c811c911ca11cb11cc11cd11ce11cf
11d011d111d211d311d411d511d611d711d811d911da11db11dc11dd11de
11df11e011e111e211e311e411e511e611e711e811e911ea11eb11ec11ed
11ee11ef11f011f111f211f311f411f511f611f711f811f911fa11fb11fc
11fd11fe11ff1200120112021203120412051206120712081209120a120b
120c120d120e120f1210121112121213121412151216121712181219121a
121b121c121d121e121f1220122112221223122412251226122712281229
122a122b122c122d122e122f123012311232123312341235123612371238
1239123a123b123c123d123e123f12401241124212431244124512461247
12481249124a124b124c124d124e124f1250125112521253125412551256
125712581259125a125b125c125d125e125f126012611262126312641265
1266126712681269126a126b126c126d126e126f12701271127212731274
12751276127712781279127a127b127c127d127e127f1280128112821283
128412851286128712881289128a128b128c128d128e128f129012911292
1293129412951296129712981299129a129b129c129d129e129f12a012a1
12a212a312a412a512a612a712a812a912aa12ab12ac12ad12ae12af12b0
12b112b212b312b412b512b612b712b812b912ba12bb12bc12bd12be12bf
12c012c112c212c312c412c512c612c712c812c912ca12cb12cc12cd12ce
12cf12d012d112d212d312d412d512d612d712d812d912da12db12dc12dd
12de12df12e012e112e212e312e412e512e612e712e812e912ea12eb12ec
12ed12ee12ef12f012f112f212f312f412f512f612f712f812f912fa12fb
12fc12fd12fe12ff1300130113021303130413051306130713081309130a
130b130c130d130e130f1310131113121313131413151316131713181319
131a131b131c131d131e131f132013211322132313241325132613271328
1329132a132b132c132d132e132f13301331133213331334133513361337
13381339133a133b133c133d133e133f1340134113421343134413451346
134713481349134a134b134c134d134e134f135013511352135313541355
1356135713581359135a135b135c135d135e135f13601361136213631364
13651366136713681369136a136b136c136d136e136f1370137113721373
137413751376137713781379137a137b137c137d137e137f138013811382
1383138413851386138713881389138a138b138c138d138e138f13901391
13921393139413951396139713981399139a139b139c139d139e139f13a0
13a113a213a313a413a513a613a713a813a913aa13ab13ac13ad13ae13af
13b013b113b213b313b413b513b613b713b813b913ba13bb13bc13bd13be
13bf13c013c113c213c313c413c513c613c713c813c913ca13cb13cc13cd
13ce13cf13d013d113d213d313d413d513d613d713d813d913da13db13dc
13dd13de13df13e013e113e213e313e413e513e613e713e813e913ea13eb
13ec13ed13ee13ef13f013f113f213f313f413f513f613f713f813f913fa
13fb13fc13fd13fe13ff1400140114021403140414051406140714081409
140a140b140c140d140e140f141014111412141314141415141614171418
1419141a141b141c141d141e141f14201421142214231424142514261427
14281429142a142b142c142d142e142f1430143114321433143414351436
143714381439143a143b143c143d143e143f144014411442144314441445
1446144714481449144a144b144c144d144e144f14501451145214531454
14551456145714581459145a145b145c145d145e145f1460146114621463
146414651466146714681469146a146b146c146d146e146f147014711472
1473147414751476147714781479147a147b147c147d147e147f14801481
14821483148414851486148714881489148a148b148c148d148e148f1490
149114921493149414951496149714981499149a149b149c149d149e149f
14a014a114a214a314a414a514a614a714a814a914aa14ab14ac14ad14ae
14af14b014b114b214b314b414b514b614b714b814b914ba14bb14bc14bd
14be14bf14c014c114c214c314c414c514c614c714c814c914ca14cb14cc
14cd14ce14cf14d014d114d214d314d414d514d614d714d814d914da14db
14dc14dd14de14df14e014e114e214e314e414e514e614e714e814e914ea
14eb14ec14ed14ee14ef14f014f114f214f314f414f514f614f714f814f9
14fa14fb14fc14fd14fe14ff150015011502150315041505150615071508
1509150a150b150c150d150e150f15101511151215131514151515161517
15181519151a151b151c151d151e151f1520152115221523152415251526
152715281529152a152b152c152d152e152f153015311532153315341535
1536153715381539153a153b153c153d153e153f15401541154215431544
15451546154715481549154a154b154c154d154e154f1550155115521553
155415551556155715581559155a155b155c155d155e155f156015611562
1563156415651566156715681569156a156b156c156d156e156f15701571
15721573157415751576157715781579157a157b157c157d157e157f1580
158115821583158415851586158715881589158a158b158c158d158e158f
1590159115921593159415951596159715981599159a159b159c159d159e
159f15a015a115a215a315a415a515a615a715a815a915aa15ab15ac15ad
15ae15af15b015b115b215b315b415b515b615b715b815b915ba15bb15bc
15bd15be15bf15c015c115c215c315c415c515c615c715c815c915ca15cb
15cc15cd15ce15cf15d015d115d215d315d415d515d615d715d815d915da
15db15dc15dd15de15df15e015e115e215e315e415e515e615e715e815e9
15ea15eb15ec15ed15ee15ef15f015f115f215f315f415f515f615f715f8
15f915fa15fb15fc15fd15fe15ff16001601160216031604160516061607
16081609160a160b160c160d160e160f1610161116121613161416151616
161716181619161a161b161c161d161e161f162016211622162316241625
1626162716281629162a162b162c162d162e162f16301631163216331634
16351636163716381639163a163b163c163d163e163f1640164116421643
164416451646164716481649164a164b164c164d164e164f165016511652
1653165416551656165716581659165a165b165c165d165e165f16601661
16621663166416651666166716681669166a166b166c166d166e166f1670
167116721673167416751676167716781679167a167b167c167d167e167f
1680168116821683168416851686168716881689168a168b168c168d168e
168f1690169116921693169416951696169716981699169a169b169c169d
169e169f16a016a116a216a316a416a516a616a716a816a916aa16ab16ac
16ad16ae16af16b016b116b216b316b416b516b616b716b816b916ba16bb
16bc16bd16be16bf16c016c116c216c316c416c516c616c716c816c916ca
16cb16cc16cd16ce16cf16d016d116d216d316d416d516d616d716d816d9
16da16db16dc16dd16de16df16e016e116e216e316e416e516e616e716e8
16e916ea16eb16ec16ed16ee16ef16f016f116f216f316f416f516f616f7
16f816f916fa16fb16fc16fd16fe16ff1700170117021703170417051706
170717081709170a170b170c170d170e170f171017111712171317141715
1716171717181719171a171b171c171d171e171f17201721172217231724
17251726172717281729172a172b172c172d172e172f1730173117321733
173417351736173717381739173a173b173c173d173e173f174017411742
1743174417451746174717481749174a174b174c174d174e174f17501751
17521753175417551756175717581759175a175b175c175d175e175f1760
176117621763176417651766176717681769176a176b176c176d176e176f
1770177117721773177417751776177717781779177a177b177c177d177e
177f1780178117821783178417851786178717881789178a178b178c178d
178e178f1790179117921793179417951796179717981799179a179b179c
179d179e179f17a017a117a217a317a417a517a617a717a817a917aa17ab
17ac17ad17ae17af17b017b117b217b317b417b517b617b717b817b917ba
17bb17bc17bd17be17bf17c017c117c217c317c417c517c617c717c817c9
17ca17cb17cc17cd17ce17cf17d017d117d217d317d417d517d617d717d8
17d917da17db17dc17dd17de17df17e017e117e217e317e417e517e617e7
17e817e917ea17eb17ec17ed17ee17ef17f017f117f217f317f417f517f6
17f717f817f917fa17fb17fc17fd17fe17ff180018011802180318041805
1806180718081809180a180b180c180d180e180f18101811181218131814
18151816181718181819181a181b181c181d181e181f1820182118221823
182418251826182718281829182a182b182c182d182e182f183018311832
1833183418351836183718381839183a183b183c183d183e183f18401841
18421843184418451846184718481849184a184b184c184d184e184f1850
185118521853185418551856185718581859185a185b185c185d185e185f
1860186118621863186418651866186718681869186a186b186c186d186e
186f1870187118721873187418751876187718781879187a187b187c187d
187e187f1880188118821883188418851886188718881889188a188b188c
188d188e188f1890189118921893189418951896189718981899189a189b
189c189d189e189f18a018a118a218a318a418a518a618a718a818a918aa
18ab18ac18ad18ae18af18b018b118b218b318b418b518b618b718b818b9
18ba18bb18bc18bd18be18bf18c018c118c218c318c418c518c618c718c8
18c918ca18cb18cc18cd18ce18cf18d018d118d218d318d418d518d618d7
18d818d918da18db18dc18dd18de18df18e018e118e218e318e418e518e6
18e718e818e918ea18eb18ec18ed18ee18ef18f018f118f218f318f418f5
18f618f718f818f918fa18fb18fc18fd18fe18ff19001901190219031904
19051906190719081909190a190b190c190d190e190f1910191119121913
191419151916191719181919191a191b191c191d191e191f192019211922
1923192419251926192719281929>]def
/sfnts
[<00010000000a000a000a000a4f532f3299c236e8000000ac000000606376
7420b970d8350000010c000005bc6670676d7ede0337000006c800000d2b
68656164f5be0708000013f400000036686865610dad1c6a0000142c0000
0024686d7478daeebfe000001450000064a66d6178702c1c0573000078f8
000000206e616d65479c3e9b00007918000005f970726570136722190000
7f14000024eb676469720000000000000000000000000003042b01900005
0008059905330000011e05990533000003d0008602000800020f05020202
04030204e0002affc000247b00000009000000004d53202000400000feff
0600fe0001c4079e0226200001ff0000000003b7050e0000002000140000
079e0000fe930000000000000000000000000050006a0073008000800086
008d009300bf00db006200830093009900a000a600a900b000c100c900d7
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000fe79056d000c03b7000600130000
fffaffedfea6ffedfeb8050e000600130000fffaffedfe93050e00130420
000600130000fffaffedff10ffee050e00130420000600130000fffaffee
fe93ff10feb80612000a050e0006000d02d2fffafff301fdfffa023f0006
000dff36fffafff302870006000f0000fffafff1079efeaffea700000000
000000000000000000500051005a005b005c005d00600061006200640068
0069006a006b006c006d006e00680069006e00600067006e00660068005f
00610063006400660068006a006b006c006d006e006f0070006f00720074
007500760076007000720073007400750076006f00700071007200730075
0077007700780079007a007b007c007d007b007c007d00770079007a007c
0078007a007c007d0078007d007e007f008000810082007e007f00810082
007e007f0080008100820083008400850086008700880089008300840085
008600870088008900830084008500860087008800890089008600870088
0089008a008b008c008d008e008f008a008b008c008d008e008f008a008b
008c008d008e008f008d008a008b008c008d008e008f0090009000910092
009300940095009600980099009b009c0090009100920093009400950096
009700980099009a009e009f00a60090009100950098009f009000910096
009700bc00c600b500ae00af00b6006800690063006a006f00700071006f
0070007100720066006c006d00700079007c007f00830086008700880089
008a0074007500760077007a007b007c007d007e008200850086008a0088
008900830078007b00820083008600870088008900760079007a007c007d
007e0083008500880089008a0073007400750077007a007d00880089008a
008b008c008d008e00900094008b008c008d00910092009300940095008c
008d00910095008f009000910092009300940095008b008c008d008e008f
009000910092009300940095008b008c008d008e008f0090009100920093
0096009700980099009c0096009700980099009a009b009c00960099009a
009c0096009700980099009a009b009c009700980099009a009b009c0097
00980099009a009b009c0096009d00a000a1009d009e009f00a000a100a2
009d009f00a000a1009f00a2009d009e009f00a000a100a2009d009e00a0
00a1009d009e00a000a2009d00a300a400a500a600a700a300a400a600a7
00a300a400a500a600a700a600a300a700a800a900aa00ab00ac00ac00a8
00a900aa00ab00ac00a800a900aa00ab00ac00a800aa00ab00ac00ae00ad
00ae00af00b000b100b200b300b400b500b600b700b800ad00ae00ad00ae
00af00b000b100b200b300b400b500b600b700b800ad00ae00af00b000b1
00b200b300b400b500b600b700b800b300ae00af00b000b200b500b600b7
00b800b900ba00bb00bc00be00c000c100c200c200b900ba00bb00bc00bd
00be00bf00c000c100c200c400ba00bb00be00bf00c000c200c300c400b9
00ba00bf00c000c200c600c700c900ca00cb00cc00cf00c500c700ce00c5
00c700c800cf00d000d200d300d7010d00d000d100e900d000fd00d005e4
000e0041000005ba009c009c005e005e0000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000051a001500a0fff8ff77fff8
03480066015401cc00ac00a200b4008c0101006e00000000000000000000
011f000a04e2001400b4fff6035c00140028fdda0568fea2ffef405a8685
74737271706f6e6d6c6b6a696867666564625f5e5d5c5b5a595855545352
51504f4e4d4c4b4a494847464544434241403f3e3d3c3b3a39383736352f
2e2d2c2826252423221f181411100f0d0b0a090807060504030201002c45
23466020b02660b004262348482d2c452346236120b02661b00426234848
2d2c45234660b0206120b04660b004262348482d2c4523462361b0206020
b02661b02061b004262348482d2c45234660b0406120b06660b004262348
482d2c4523462361b0406020b02661b04061b004262348482d2c0110203c
003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed5158
2320b04d44235920b0042651582320b00d44235921212d2c202045186844
20b001602045b04676688a4560442d2c01b10b0a432343650a2d2c00b10a
0b4323430b2d2c00b0282370b101283e01b0282370b10228453ab1020008
0d2d2c2045b00325456164b050515845441b2121592d2c2045b000436044
2d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb81000
62602b0c642364615c58b00361592d2c8a03458a8a87b0112bb0292344b0
297ae4182d2c4565b02c234445b02b23442d2c4b525845441b2121592d2c
01b005251023208af500b0016023edec2d2c01b005251023208af500b001
6123edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20
b001610110203c003c2d2c00b00743b006430b2d2c21210c6423648bb840
00622d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c
21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c642364
8bb84000626023212d2c4523456023456023456023766818b08062202d2c
b00426b00426b00425b0042545234520b003266062636820b0032661658a
2344442d2c2045b0005458b040442045b04061441b2121592d2c45b1302f
4523456160b0016069442d2c4b5158b02f2370b01423421b2121592d2c4b
515820b0032545695358441b2121591b2121592d2c45b01443b0006063b0
016069442d2cb02f45442d2c452320458a60442d2c45234560442d2c4b23
5158b90033ffe0b134201bb3330034005944442d2cb0164358b00326458a
586466b01f601b64b020606620581b21b04059b001615923586559b02923
442310b029e01b2121212121592d2cb0164358b004254564b02060662058
1b21b04059b0016123586559b0292344b00425b00725082058021b0359b0
052510b004252046b0042523423cb0072510b006252046b00425b0016023
423c2058011b0059b0052510b00425b029e0b0072510b00625b029e0b004
25b00725082058021b0359b00425b003254348b00625b00325b001604348
1b2159212121212121212d2cb0164358b004254564b020606620581b21b0
4059b0016123581b6559b0292344b00525b00825082058021b0359b00425
10b005252046b0042523423cb00425b0072508b0072510b006252046b004
25b0016023423c2058011b0059b0042510b00525b029e0b02920456544b0
072510b00625b029e0b00525b00825082058021b0359b00525b003254348
b00425b0072508b00625b00325b0016043481b2159212121212121212d2c
02b00425202046b004252342b0052508b003254548212121212d2c02b003
2520b0042508b0022543482121212d2c452320451820b000502058236523
59236820b040505821b04059235865598a60442d2c4b53234b515a582045
8a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a58
381b2121592d2cb000214b5458381b2121592d2cb002435458b0462b1b21
212121592d2cb002435458b0472b1b212121592d2cb002435458b0482b1b
21212121592d2cb002435458b0492b1b212121592d2c2320b000508a8a64
b10003255458b0401bb10103255458b005438b59b04f2b5923b0622b2321
235865592d2cb108000c215460432d2c014623466023466123201020468a
61b8ff80628ab140408a704560683a2d2c208a2349648a2353583c1b2159
2d2c4b52587d1b7a592d2cb012004b014b54422d2cb1020042b123018851
b1400188535a58b910000020885458b202010243604259b12401885158b9
20000040885458b2020202436042b12401885458b2022002436042004b01
4b5258b2020802436042591bb940000080885458b202040243604259b940
00008063b80100885458b202080243604259b94000010063b80200885458
b202100243604259b12601885158b94000020063b80400885458b2024002
43604259b94000040063b80800885458b202800243604259b12801885158
b94000080063b81000885458ba00020100000243604259595959595959b1
0002435458400a0540084009400c020d021bb10102435458b2054008ba01
0000090100b30c010d011bb18002435258b2054008b80180b109401bb901
000002435258b2054008ba0180000901401bb901800002435258b2054008
b80200b109401bb2054008ba010000090100595959b9400000808855b940
00020063b8040088555a58b30c000d011bb30c000d015959594242424242
2d2c451868234b51582320452064b04050587c59688a6059442d2cb00016
b00225b0022501b001233e00b002233eb10102060cb00a236542b00b2342
01b001233f00b002233fb10102060cb006236542b0072342b00116012d2c
20b82000628a6023622d2cb0072558001b0159b0042510b00325b0022520
b8ffff545821cd1bed5921b006255cb006255a58b0092b5920b005254ab0
042547b004254760b0062547b0806361b00225b0005558b00325b0072549
6359b0082558001b0159b00425b0062549b009255cb009255a58b0092b59
b0072546b0806361b0032520b0005558631b2159612320b0005558b08063
1b21b08059b0592bb006255c586959b00425202010b00048233ab0062658
001b0159b0052658b003252f598a12233221212d2cb00625b00a2587b006
25b009254ab0005358b00625b00a251bb00925b0072559b00225b0022507
0cb005256323b00625636020b94000040063535821b00426b00426b00a1b
b94000040063655158b0042665b0042665b00a1bb00426b00426b000b003
25b003250b0d0ab0092eb00725b007250b0d0ab00b2eb00525b005250759
5920b0005558b00525b0052587b00725b007250bb0092510b00b25b00926
20b8ffff545821cd1bed59b00525b0052507b00825b00b254923b00625b0
062587b00a2510b00b25c15920b00051b800522378b00161b00225b00725
b0072507b00a25b00d254961b08062b00525b005250bb00a252338b00625
b0062587b00825b008250bb00a2510b00b25c4b00625b0062507b00925b0
0c2549b0032554b8ffa723792121212121212121212121212d2c23b00054
58b9400000001bb900004000598ab0005458b9400000001bb90000400059
b05b2b2d2c08b0005458b9400000001bb900004000590db05b2b2d2c8a8a
080d8ab0005458b9400000001bb90000400059b05b2b2d2cb00426b00426
080db00426b00426080db05b2b2d2cb0022563b0206066b00225b8200062
6023622d2c204569442d2c234ab1024e2b2d2c234ab1014e2b2d2c238a4a
234564b0022564b002256164b00343525821206459b1024e2b23b0005058
65592d2c238a4a234564b0022564b002256164b00343525821206459b101
4e2b23b000505865592d2c20b003254ab1024e2b8a103b2d2c20b003254a
b1014e2b8a103b2d2cb00325b003258ab0672b8a103b2d2cb00325b00325
8ab0682b8a103b2d2cb0032546b003254660b004252eb00425b00425b004
2620b000505821b06a1bb06c592bb0032546b00325466061b08062208a20
10233a232010233a2d2cb0032547b003254760b0052547b0806361b00225
b00625496323b005254ab080632058621b2159b0042646608a468a4660b0
2063612d2cb00426b00425b00425b00426b06e2b208a2010233a23201023
3a2d2c2320b001545821b00225b1024e2bb0805020605920606020b00151
5821211b20b005515821206661b0402361b100032550b00325b00325505a
5820b00325618a535821b000591b21591bb00754582066616523211b2121
b000595959b1024e2b2d2cb00225b004254ab0005358b0001b8a8a238ab0
0159b004254620666120b00526b0062649b00526b00526b0702b236165b0
2060206661b02061652d2cb0022546208a20b000505821b1024e2b1b4523
21596165b00225103b2d2cb0042620b802006220b80200638a236120b05d
602bb00525118a128a20398a58ba005d10000004266356602b2321201020
4620b1024e2b23611b2321208a201049b1024e2b593b2d2cba005d100000
09256356602bb00525b00525b00526b06d2bb15d0725602bb00525b00525
b00525b00525b06f2bba005d10000008266356602b20b0005258b0502bb0
0525b00525b00725b00725b00525b0712bb0021738b00052b00225b00152
5a58b00425b0062549b00325b00525496020b0405258211bb000525820b0
025458b00425b00425b00725b0072549b00217381bb00425b00425b00425
b0062549b0021738595959595921212121212d2cb12801885158b9400004
0063b8080088545c1bb001592d2cb12801885158b94000040063b8080088
545c1bb001592d0000010000000630a41629e1985f0f3cf5001908000000
0000bbeb7ccc00000000d4ba0ee3fbfafd8009ec08360000000900020001
00000000000100000600fe0001c40aa0fbfafaa009ec0001000000000000
00000000000000001929040e0000000000000000000001cf000004a10023
04a1002304a1002304a1002304a1002304a1002304a1002304a1002304a1
002304a1002304a10023061bffcc061bffcc045a00ac0444006104440061
0444006104440061044400610444006104ec00ac04ec009704ff001b04ff
001b03e800ac03e8004503e800ac03e8004603e8004603e8006303e8005f
03e8008103e800ac03e800ac03ad00ac050c005b050c005b050c005b050c
005b050c005b04fc00ac04fc00ac05400020020400ac0204ff4a02040028
0204ff390204ff310204ff500204ff4f0204ff7b0204001e020400270492
00ac028d0007028dffa9042800ac042800ac035d00ac035d0081036200ac
035d00ac0370001c045e00ac06d700ac052a00ac052a00ac052a00ac052a
00ac052a00ac050700ac054c0063054c0063054c0063054c0063054c0063
054c0063054c0063054c0063054c0063054f0063054f006306ef00630422
00ac042200ac05620063045800ac045800ac04580053045800ac03ad0047
03ad004703ad001503ad001803ad004703ad004703e6000f03e6000f03e6
000f03e6000f052200aa052200aa052200aa052200aa052200aa052200aa
052200aa052200aa052200aa052200aa052200aa048a0022071e003d071e
003d071e003d071e003d071e003d0427003003e6001e03e6001e03e6001e
03e6001e03e6001e03bf003b03bf003b03bf001a03bf003b03f4001003f4
001003f4001003f4001003f4001003f4001003f4001003f4001003f40010
03f4001003f40010055cffe2055cffe2040400a103cb006d03cb006d03cb
006d03cb006d03cb006d03cb006d046500a10465006a0477003204770032
038000a103800030038000a103800020038000200380002c038000290380
0042038000a1038000a1035000a10482006c0482006c0482006c0482006c
0482006c047800a10478008c049d004001ec00a101ecff5801ec001901ec
ff4801ecff2701ecff5501ecff5201ecff7101ec001101ec0018041b00a1
023e0000023eff8c03c900a103c900a102e000a102e0008702e600a102e0
00a102f0003203d500a1060600a1049100a1049100a10491009904910078
049100a1046600a104aa006604aa006604aa006604aa006604aa006604aa
006604aa006604aa006604aa006604ba006604ba00660606006603c500a1
03c500a104b1006603ed00a103ed00a103ed004503ed00a1034f0049034f
0049034ffff5034ffff6034f0049034f00490359001c0359fffe0359001c
0359001c048d009f048d009c048d009f048d0097048d0075048d009f048d
009f048d009f048d009f048d009f048d009f03fd0021063e0037063e0037
063e0037063e0037063e003703cc00360383001003830010038300100383
0010038300100369004403690044036900080369004403d5005c03d5005c
03d5005c03d5005c03d5001e03d5005c03d5005c03d5005c03d5005c03d5
005c03d5005c062f005c062f005c043400990362005a0362005a0362004e
036200570362005a0362005a076f005a06dd005a0601005a0601005a0434
0060048c0060046a00600434006103fb005d03fb005d03fb005d03fb005d
03fb005d03fb005d03fb005d03fb005d03fb005d03fb005d02710025069a
002508d5002504ab0025069b002508d50025043c0025043c0025043c0025
043c0025044f0025044f0025044f0025044f0025043c0025043c00250676
002506760025067600250676002506890025068900250689002506890025
0676002506760025043c0025043c0025067600250609002508430025043c
0025043c002504830025043c00250676002504ed002504ed002505130025
0728002503c4003503c4003503c4003503c4003503c40035043400600434
0060043400600434006004340060043400990434ffad0443fff901d60085
01d6ff6e01d6000f01d6ff5a01d6ff2001d6ff7201d6ff5801d6ff6701d6
001101d6009903c00085041e008801eaffd501eaffd501eaff6303a30099
03a3009903a3009901d6009901d6002a021c009901d6004b01fb001c02fd
0099066400990434009904340099043400990434004e0434009904a2ff9d
043400990438005a0438005a0438005a0438005a0438004f0438005a0438
005a0438005a0438005a043c005a043c005a06cc005a0434009904340099
0434006002ca009902ca009902cafff902ca006e03210051032100510321
fffe0321fffd032100510321005105ae005105ae00510438009901f10099
02ae002102c4002102ae002102bc002604e6002104750021047500210475
002104750021047500210475002104750021047500210475002104750021
05130021074b002106d9002106d9002106d9002106d9002106d9002106d9
002106d9002106d9002106d9002106d90021043400940434008e04340094
043400860434004d04340089043400860434009404340094043400940434
0094039d002205b8003505b8003505b8003505b8003505b8003503770029
039f0022039f0022039f0022039f0022039f002203290059032900590329
00070329005903380072036100640378005d02ac004402e5006c024e0044
02e5004802b8004701c100240297002a02e9006c01630061016dffd80297
006c015e006c0456006c02e6006c02e6004502e5006c02e5004801f6006c
0230004201e3002302e9006c0285001f03ef002c027e00280286001f0237
00420254000002750000029400000000fd080000fce80256000002750000
029400000000fd080000fce803290000035f0000039400000000fc9f0000
fc6703290000035f0000039400000000fc9d0000fc6901ff0000039a0000
03a2000003a800000000fc650000fc600324000002f50000034600000367
00000000fca00000fc7e0327000003490000036a00000000fc9d0000fc7d
030c0000030f0000031100000000fcac0000fca9029100000298000002a0
00000000fce90000fce202cf000002c2000002b5000003c1000003e10000
040000000000fc520000fc3101ce000001d6000001ce000001ce00000000
fd4d0000fd4d027500840000fd7a027f00840000fd7601f7008402310000
04a1002304a1ff89045a00ac035300ac0484003a03e800ac03e8fec703bf
003b04fc00ac04fcfe9e054c0063020400ac0204feb20204ff52042800ac
0495002406d700ac052a00ac03ef0053054c0063054cff1604fc00ac0422
00ac03ab004603e6000f03e6001e03e6fe6e03e6001e0613000004270030
060000900550005e0550fef903f4001003f40010040400a102fb00a103c9
0023038000a1038000a103690044047800a1047800a104b4006601ec00a1
01ec000001ecff5403c900a103e10011060600a1049100a10387005e04aa
006604aa0066047800a103c500a1035b004b0359001c0383001003830010
038300100552000003cc00360558008704b1006604b10066048a0061048a
00610440009904320064039200180430000003a5005903a5005902c8004e
044c0099044c00990441006004780006023200940232ffec0232ff7a0232
ff0f03a3009903b4000004660099039700220302004d0303004d0438005a
0438005a046c002804120076044100590349005c03190003045500900455
00900455007d0455001605360055053b00550369001205a9009405920064
05920064028900000000fd0a03f400000000fc3602050097020500970205
00970224004801ff006e01ff006e04a10023044d00ad045a00ac037000ac
037000ac037600ac0527000303e800ac03e8004503e800610668005503ca
004b052200ac052200ac052200ac020400ac0204ff50028d0007045800ac
045800ac04e3000306fa000306d700ac04fc00ac070300ac054c0063054c
006304f900ac042200ac0444006103ad004703e6000f0438000f0438000f
04b800220594000004270030051c00ac04f500ac0472007406f200ac071e
00ac04eb000f061800ac044000ac0462005d04610062070800ac04710053
04ff000f04f2000f0504000003f4001003ee00a2040400a1031400a10314
00a1032700a10480000e038000a1038000300380002c0578004403800057
048900a1048900960489009501ec00a101ecff55023e000003ca00a103ca
00a104320001060600a1047800a104aa006604a90066046a00a103c500a1
03cb006d034f00490359001c039d001e039d001b042f0022050a000003cc
0036048e00a1046900a103fa006d062300a1064500a1045f0017058300a1
03e800a103e4006b03f00066063200a103ff005c045f001f0463001f044d
000006010001063200a103d5005c044300000430000003d5009902c40099
02c4009902d5009901d6ff58047700170434006003fb005d03fb005d03fb
005d0583003e0362004b04530099045300780453008801d6008501d6ff72
01eaffd503b6009903b6009904150016060200130569005f044700990628
00990438005a0431005a042a009904340086043400990362005a03210051
0319000a06640099039f0022039f001803d2002204fe0051037700290455
00990433009903c0004205d4009905fe0099044a000a0554009903c20099
038b004d038d005d05c6009903cb00380453fff90443fff904270018036e
0000036e0000036e00000000fca50000fca5029b010a029b00bf029b00bf
03b5008503b5005e03b5005e03de0064026000ed026000b10364007a0361
005f01ff002a02240048022400bb020500970586009601ff008c01ff002a
01ff008c01ff002a035900880359002b035900880359002b01ff002a0359
002b02b6007402b600c002b6007402b600c004190075041900ad04190075
041900ad0317000102df001f03af018a03fc01ae0317000b02df002d0273
00450273004503fcfff603fcfff6073e0095073e0095073e0095073e0095
03fcfff903fc00c10205009702050097026d0085026d007a027400bf0274
005a0284005602840075024000840240007a024a00b0024a0067026d0085
026d007a027400bf0274005a028400560284007503fc009e03fc007703fc
007803fc007604b0006b043d006e03fc006a03fc003d01c4008b0335008b
057500000556000007f7000007270000073c00000727000006ad00af06ad
00af040e008005a4003f05ac004d02b6000003fc003f04b30049040e002a
03fc0057040e00600434005803fc00b903fc004a040e005303fc006d0419
002b040e003403f30035039f006103be005f039f0058039f002506210049
083300ac03fc002406e300a10411001d0494005f02cb002303ec006203ec
00510455002203d700510436007e03b20035043600630436005c040e0048
040e00ae040e0072040e0067040e0020040e0065040e006b040e0063040e
0052040e005204430067028d00190381005c0373005903ac002603680061
03b7006e0349002f03b5004b03bc0052039f0050039f008d039f0065039f
0062039f003a039f0067039f0061039f005e039f0051039f00500494005f
02cb002303ec006203ec00510428002203d700510436007e03b200350436
00630436005c040e0048040e00ae040e0072040e0067040e0030040e0065
040e006b040e0063040e0052040e00520321004801f8002302b0004b02ad
004102db002502a6004502df005b0291003202e1004b02df004402ea0051
02df005102d0005701bc006001bc00580321004801f8002302b0004b02ad
004102db002502a6004502df005b0291003202e1004b02df004402ea0051
02df005102d0005701bc006001bc0058029d003801f500310252003c0249
002d024a001402460032025100300238002202570025024d0023029d0038
01f500310252003c0249002d024a00140246003202510030023800220257
0025024d002302b1ff4b03130044055f0044056900440517004405690044
052e00440553004405c9004e05c9004e0567004705b7004705a2004705cd
0027057d004505a20045052a003505b80048084e0048057d005c07c9005c
03fc004603fc004c03fc006003fc002b03fc005e03fc006003fc005903fc
004503fc006503fc004c03fc005503fc005603fc003d05e9002c04050035
06d300690443006102ed000703fc00080484003a0550005e046600990665
00660454005b0416004a073e009a073e0096073e00c9073e00c9070e00af
070e013a070e00af070e013a0a4e009a0638009f04660028018a000001da
000004660000046600000466000004660000046600000466000004660000
046600000466000004660000046600000466000004660000046600000466
000004660000046601d004a1002304a1002304a1002304a1001904a10015
04a1001d04a1002304a1001c04a1001c04a1001c04a1001d04a1002303e8
00ac03e800ac03e8003703e8ffe803e8ffe903e8ffe803e8ffe803e80037
02040015020400a0054c0063054c0063054c0063054c0063054c0063054c
0063054c0063059400630594006305940063059400630594006305940063
052200aa052200aa05c600aa05c600aa05c600aa05c600aa05c600aa05c6
00aa03e6001e03e6001e03e6001e03d5005c03d5005c03d5ffbb03d5ffb1
03d5ffb803d5ffb803d5005703d5ffb803d5ffb803d5ffb803d5ffb803d5
005c03fb005d03fb005d03fb003003fbffdb03fbffdb03fbffd903fbffcb
03fb005d01d6002601d600850438005a0438005a0438ffe80438ffea0438
ffe80438ffea0438005a04a0005a04a0005a04a0005a04a0005a04a00049
04a0005a043400940434009404d2009404d2009404d2008c04d2009404d2
004604d20094039f0022039f0002039f0022046a00530466003803f40010
03f4001003f4ffbd03f4ffc003f4ffbd03f4ffc803f4001003f4ffc803f4
ffc803f4ffc803f4ffc803f40010038000a1038000a10380fff00380ffa7
0380ffa00380ffa20380ff8e0380001101ec000901ec009404aa006604aa
006604aa002104aa002204aa002104aa002204aa006604ec006604ec0066
04ec006604ec006604ec006604ec0066048d009f048d009f0515009f0515
009f0515009a0515009f051500750515009f038300100383fff103830010
01da00000466000004660000046600000466000004660000046600000466
00000466000004c10066052400ac052400ac050600ac049300a1049300a1
047c00a103e6000f02ae00210359001c01d60011043c0025043c0025043c
002506760025067600250676002502f5001c02e7008e0306005a034b008e
02a8008e028c008e0344005a035b008e01a6008e01cb000502e0008e025b
008e046d008e0375008d0375005a02d8008e0375005a029b005702800046
025700040314005702e3001a0445002202b5001c028b001c02b800500000
fdfd0000fdfd0466ffff0466ffff0466ffff0466ffff03c1ffff03c10000
030cffff030c0000030cffff030c0002023100000231000001ffffff01ff
ffff01ffffff01ffffff0000fd090000fd0902aa008202aa008202aa0098
02aa009801ce008402aa008202aa008202aa008202aa0082027f008e027f
008e0324000002910084046601fd02aa001402aa00130329000003290000
032900000329ffff039a00000327000003fcfff903fcfff9039a0000039a
00000000ff080000fe4c0000fdfb0000fdfb0000fe3f0000fe3f0000fdc2
0000fdc201ce008402aa00140291008302aa001502aa009302aa0093039a
014c039a00000000fdfd0000fdfd0000fd090000fce90000fd090000feb7
02aa001402aa001403fcfff90466ffff02aa0098039a0000039a0000039a
0000039a0000039a0000039a000004010014040101470000000002aaffff
02aaffff01ceffff01ceffff030c0000030c000002aa009302aa00c802aa
00c803f100c801ceffff01ceffff01ce000001ce000002aa00a003b10084
02aaffff02aaffff075c003c075cffff075cffff075cffff075cffff075c
003f06d0ffff06d0ffff075c0003075c0003075c004001df003001df0030
01e7003201e7003200f8004400f8004402070030020700300209004c0209
004c019d0030019d003002070032020700320209004c0209004c0309004c
0309004c015f004c015f004c015200180152001801c3001601c3001601bf
001c01bf001c032700510327005103270051032700510000ffab03bdffff
041a0000041a00000416000104160001041a0001041a0001041a0001041a
000104010002040100020401000204010002015f004c02aa00c801ce00c8
03f100c804ec000f044d00ad0440001e0462005d049d006104ff001b057e
000f044d004c03e8006c0525006403ca005a03adffd6050e005b048a001c
025000ac0226001b042800ac070900aa052affd6054c0063062f006104e4
000f045800ac03ad004703ab0046043f000f03e6000f0550005e052200aa
0442001e03bf003b03ca004b03ca005a040e006808ab00ac081500ac0603
00ac054700ac07b700ac071400ac04a100230204ff3a054c0063052200aa
052200aa052200aa052200aa052200aa04a1002304a10023061bffcc050c
005b050c005b04280073054c0063054c006303ca0008089500ac081500ac
050c005b072800ac04d400ac052a00ac04a1ffef04a1002303e8ffe103e8
006e0204feac0204ff4c054c003b054c00630458ffbf0458006e0522002f
052200aa03ca004b04fc00ac052400ac040e004d03ef003b04a1002303e8
00ac054c0063054c0063054c0063054c006303e6001e04a1ffd90444ffe7
035d001b03e6ffb803940064046b001b0545001b0495002403e8ff9e02a1
0007050a00630469001a04a0001b04a10023045a00ac045a00ac045a0099
0444006104ec00ac04ec00ac04ec00ac04ec00ac04ec00ac03e8008403e8
008403e8008203e8003403e8008103ad00ac050c005b04fc00ac04fc00ac
04fc00ac04fc002804fc00ac0204ff360204ff71042800ac042800ac0428
00a0035d00ac035d0035035d0060035d006606d700ac06d700ac06d700ac
052a00ac052a00ac052a00ac052a00ac054c0063054c0063054c0063054c
0063042200ac042200ac045800ac045800ac04580077045800ac03ad0047
03ad004703ad004703ad004703ad004703e6000f03e6000f03e6000f03e6
000f052200aa052200aa052200aa052200aa052200aa048a0022048a0022
071e003d071e003d042700300427003003e6001e03bf001503bf003b03bf
003b035d001b03c2ff9b0433001b045800ac052400ac047100ac03e2003b
0444003803ad005903b500ac046a0027043400990434000403b3005a0434
00600430005d0271ffee064300990434009903a300990241002703b40014
044c0099053e0059043400990321005102e0002102ae002103fc001b0329
005903ca004b0366003a03680050075d006003c00099061e009903d50056
01d6ff570438005a0434007a0434008804340088043400880434008803fb
006203d5005803d50058062f005c044cffe203c4003503a3003a0438005a
0438005a03ca002e01eaff60075d006003c400350434009903d5ffbf03d5
005c03fbffe203fb005d01d6fece01d6ff650438ffed0438005a02caff73
02ca00100434ffff0434008703ca004b0434005104cd0060040e0052034c
005903d5005c03fb005d0438005a0438004f0438005a0438005a039f0022
0289009804eb009902ae002106930060069200600362fff0032100510329
00590394006403fb003c0240fff70240fff70434006002ff002703e20022
03720049040e00720321005101f300ad032900ad049700ac029b010a03d5
005c0434009904340099043400860362005a043400600434006004340060
043400600434006003fb005d03fb005d03fb005d03fb005003fb005d0271
002503c40035043400990434009904340067043400130434009401d6ff1e
01d6ff1e01d6ff5a03a3009903a3009903a3006b01d6008901d6ff5801d6
ff5801d6ff59066400990664009906640099043400990434009904340086
043400860438004f0438004f0438005a0438005a043400990434009902ca
009902ca008a02ca000a02caffff03210051032100510321005103210003
0321005102ae002102ae002102aeffd202aeffd204340089043400550434
007b0434004d04340086039d0001039d002205b8003505b8003503770029
03770029039f00220329000103290059032900000434008602aeffc605b8
0035039f002203d5005c01f100530241002703d5002902aeff9604630099
03db00990344005903c200360362003b02ee003c03190099053b00550471
000803ee00a203ee001403cb004803fc006d0477003204d3000803ee0053
0380007204a40066038a00680350ffe80482006c03f300130232008e01ec
fffe03c900a1063200910491ffe804aa00660592006e0433000803ed00a1
034f0053035b004b038300080359001c04b10066048d009f03b700100369
0044039000570393006b0398005507ce00a1085500ac055a00a105cd00ac
06cf00a1076800ac03f4001001ecff4704aa0066048d0096048d009f048d
009f048d009f048d009f03f4001003f40010055cffe20482006c0482006c
03c9005204aa006604aa00660390000007ce00a1085500ac0482006c0655
00a1046200a0049100a103f4ffc503f400100380ffb10380004d01ecfed0
01ecff7004aa001d04aa006603edffa403ed0064048d0000048d009f0390
00570478008c049300a103c50057038c004403f40010038000a104aa0066
04aa006604aa006604aa00660383001003f4001003cb002402e000270359
ffeb0339005004040027048d002703fd00210380ffff023e0000048b0066
03ed00270383000c039000550339005001f300ac032900ac049700ac0260
00ed03f40010040400a1040400a10404006e03cb006d046500a1046500a1
04650081046500a1046500950380002a0380002603800041038000000380
004a035000a10482006c047800a1047800a10478009a04780020047800a1
01ecff2a01ecff5503c900a103c900a103c9007e02e000a102e0000002e0
002802e00024060600a1060600a1060600a1049100a1049100a1049100a1
049100a104aa006604aa006604aa006604aa006603c500a103c500a103ed
00a103ed00a103ed003e03ed0091034f0049034f0049034f0049034f0000
034f00490359001c0359001c0359001803590019048d009f048d0079048d
009f048d0075048d009f03fd002103fd0021063e0037063e003703cc0036
03cc003603830010036900050369004403690020047800a10359000a063e
00370383001003f4001002e00027035effa703c5002703ed00a104b600a1
03ef00a10369004403cb004803500060039900a1043c0025043c00250447
002504470025043c0025043c0025044f0025043c0025043c002506760025
067600250682002506820025067600250676002506890025067600250676
002504750021047500210475002104750021047500210475002104750021
047500210475002106d9002106d9002106d9002106d9002106d9002106d9
002106d9002106d9002106d9002103d50096043400600434009904340099
0362003b039b005a043400600434006003fb006203fb0062051b00650362
005a0362004b0435004b043b005d0241fff704340060043400600451005a
039d001f03d0001e0433009404340099043400990241002701d6fff30232
00940267002102e7ffa702f9002701d60099048600990663009406630094
066400990434ffc204340099045300990438005a05b3005a059200640536
005502ca002302ca002302ca002302ca009902ca0099028e0094028e0023
03980085039800850321005101eaffd50242fff801eaffd5028affc402ae
004102ae002104a400270476004904550090039d002205b80035039f0022
0351001f0329005903d3005903bc004b03bb0056039400640394005e0394
00640362005a0507005f03d50099043b005a046b005a04470099028affc4
03a300270319009904340060039400640394005e066f006006d400600719
006004f3002103c40021057a0021060c002504ae00990469009903ef002c
03ef00700434ffd5044dffd503d60010050fffe3062f00620412002703cb
006a0444009904590030033f0099036f005501d600850227000003910098
02f000300569005f045300990474005a03cb006304a9006604a800660528
001406cc00560368003a0438005a0438005a03a8009903cf005203cf0052
033f001b046a009a0465004b05c7004b0664014c03de0020060e0035034f
0042032f00380321005103d0001e02f2009903de00200450009903a80099
052f0083040e000102f5001c03f1000002e7008e02fb0027034b008e02a8
008e02a800500344005a035b008e01a6008e01cb000502e0008e025b008e
046d008e0375008d0375008d0375005a02b2004802d8008e029b00570257
0004031400570445002202ac004402ac006c02e50048042b004402e5006c
02e5004802b8004702b8004702770046027700460297002a016300610297
006c0456006c02e6006c02e60045024e003602e6004502e6004502e5006c
01e3002302e9006c02db00460456006c0285001f024a000d02be006c0246
00230283002803650055025f00180163006101f6006c02e9006c0285001f
02be006c0246002302e5006c03650050025f00180694009404bbffa704bd
0060030affa7069cffe504b4002204beffa70352ffa7031affa7039d0014
030fffa70329ffc203c4003b0304006e03c4003506880021024100270269
00270468002704db002704c40027043400990451006002710025054c0060
041e009901f0006b067f0099045100990434009902ca006a037b005102fa
ffd5039d002203ed0029033c0059047c005c04d800600434006003fb005d
0362005a0362004b03fb006201d600850362003b0233001e04d800940376
004b02e5006b024e0044026e004402b200440277004201c1002401c10007
0297002a02e9006c0192000001aa006c0163006d0192000001e500000194
006c017b00530224006e0456006c0456006c031b0000031c006c0304006e
02e600450336004502300042016dffd801e4002302e9000002b8002c02e6
006e02e6006e0285001f023700420294004202a600420272003c02e60045
02e9006c02e9006c016dffd801f6006c01f6002502030025028b006c03ef
002c0286001f01c400540334005401ff008c01ff002a01ff008c01ce0084
01ce0084029900650299006c03fc004503fc0065044b0044044b00440251
00f20256000002540000025100f203270000025400000256000002390098
0239009801ce008401ce008402aa008202aa008202aa008202aa008202aa
004b02aa009302610024015e006c02300042027e00280299006c03100096
031000960310009603100096031000960457009604570096045700960457
009603100043045700430457004304570043045700430457004304570043
0457002f0457002f0457002f0457002f0457002f0310002f045700250457
00250457002504570025045700250310001a0457001a0457001a0457001a
0457001a0457001a03100042045700420457004204570042045700420457
004204570096045700960457009604570096031000420457004204570042
045700420457004204570042045700420457002f0457002f0457002f0457
002f0457002f0310002f0457002f0457002f0457002f0457002f0457002f
031000260457002604570026045700260457002604570026031000420457
004204570042045700420457004204570042045700960457009604570096
045700960310004204570042045700420457004204570042045700420310
002604570026045700260457002604570026045700260310002304570023
045700230457002304570023045700230310002f0457002f0457002f0457
002f0457002f0457002f0310004b0457004b0457004b0457004b0457004b
0457004b0457009604570096045700960457009603100042045700420457
00420457004204570042045700420310001a0457001a0457001a0457001a
0457001a0457001a03100024045700240457002404570024045700240457
00240310002f0457002f0457002f0457002f0457002f0457002f0310004e
0457004e0457004e0457004e0457004e0457004e04570096045700960457
00960457009602aa006202aa006203290000049a00000359002b02aa0085
02aa008502aa00c802aa00c8029100840254000003c1ffff03c10000039a
0000022400bb02aa009802aa009802aa009802aa00980440fff60440fff6
0302009803270000032700000324000002aa0000071200d4071200d402ac
004402b8004702e60045027e002802b8004701d9ffff01d9ffff01d90000
01d90000028900000289000002890000028900000000fc660000fc660329
000003290000032900000329000003240000032400000329000003290000
0329000003290000032400000324000003f4000003f4000003f4000003f4
0000032400000324000003270000030c000001ffffff01d9000003270000
0329000003290000032900000466000004660000046600000466000003f4
000003f4000003f4000003f40000023200b6023200b6054c006304440061
04440043044400610444004303e6000e0456fec803e6000e03ad00ac054c
0063045d001e059700ac04a2000f04440061042200ac043200640375005a
037500420478000604d700510684001404120076041200030362005a0362
003b0362005a0362003b053b0055037800940438005a0399001404c50099
04a2000f0349005c01eaffd50476ffd504d7005104a9006603cb006d03cb
004803cb006d03cb00480389001a0389fe6f0389001a035000a104b1005b
03e2001e050000a1045d002a03db006d03c500a104a1ffc504a1fe8a04a1
fe6204a1ff2204a1ffc604a1fe8b04a1fe6204a1ff2204a1ff8004a1ff58
04a1002304a1002304a1002304a1ffc504a1fe8a04a1fe6204a1ff2204a1
ffc604a1fe8b04a1fe6204a1ff22066500230665ffc50665fe8a0665fe62
0665ff220665ffc60665fe8b0665fe620665ff2203e8fef004bdfe8204bd
fe7a03e8fef004c1fe8604bdfe7a03e8fea403e8fe9504fcfef005d1fe82
05d1fe7a0559feaa04fcfef005d1fe8205d1fe7a0559feaa04fcfea404fc
fe9504fc00ac04fcfef005d1fe8205d1fe7a0559feaa04fcfef005d1fe82
05d1fe7a0559feaa06c000ac06c0fef00795fe820795fe7a071dfeaa06c0
fef00795fe820795fe7a071dfeaa0204fef002d9fe8202d9fe7a0261feaa
0204fef002d9fe8202d9fe7a0261feaa0204fea40204fe950204ff4e0204
ff7a054cff0605f5fe82060cfe7b054cff0605f2fe7f0605fe74054cfecf
054cfeac0422fef003e6fe940517fe820513fe7e049ffeaa03e6fe4703e6
fe4703e6001e03e6001e0550ff0605f2fe7b060dfe780599feaa0550ff06
05f2fe7b0611fe7c0599feaa0550fecf0550feac0550005e0550ff0605f2
fe7b060dfe780599feaa0550ff0605f2fe7b0611fe7c0599feaa0714005e
0714ff0607b6fe7b07d1fe78075dfeaa0714ff0607b6fe7b07d5fe7c075d
feaa048a0061048a0061048a0061048a0061048a0061048a0061048a0061
048a0061048a0061048a0061048a005a048a0061048a0061048a0061048a
0061048a0061048a0061048a0061048a0061048a0061048a0061048a0061
048a0061048a0061048a005a03a5005903a5005903a5004f03a5005903a5
005203a5005203a5005903a50059044c0099044c0092044c008f044c0094
044c0099044c0092044c0092044c0094044c0099044c0099044c0059044c
0099044c0099044c0092044c008f044c0094044c0099044c0092044c0092
044c0094044c0099044c0099044c0059023200010232ff860232ff830232
ff62023200000232ff860232ff860232ff600232ff100232fecf0232ff60
0232ffef0232ff7b0232ff290232ff690232ff680438005a0438005a0438
005a0438005a0438005a0438005a0438005a0438005a0412007604120076
045500900455008204550082045500840455009004550082045500820455
008404550012045500100455008004550090045500900455004104550071
0455007d0592006405920064059200640592006405920064059200640592
006405920064059200640592006405920064059200640592006405920064
059200640592006405920064059200640592006405920064059200640592
00640592006403f4001003f4001003f4001003f4001003f4001003f40010
03f4001003f4001003f4001003f4001003f4001003f4001003f4001003f4
001003f4001003f4001003f4001003f4001003f4001003f4001003f40010
03f4001005b9001005b9001005b9001005b9001005b9001005b9001005b9
001005b9001005b90010038000a10380004903800049038000a103800049
03800049038000a10380007b047800a1047800a1047800a1047800a10478
00a1047800a1047800a1047800a1047800a1047800a10478006f047800a1
047800a1047800a1047800a1047800a1047800a1047800a1047800a10478
00a1063c00a1063c00a1063c00a1063c00a1063c00a1063c00a1063c00a1
063c00a1063c00a101ec000901ecff6201ecff6201ecff6501ec000901ec
ff6201ecff6201ecff6501ecff1001ecfee901ecff6401ec000001ecff8c
01ecff2a01ecff5301ecff7004aa006604aa006604aa006604aa006604aa
006604aa006604aa006604aa006603c500a103c500a1038300100389001a
038300100389001a038300100389001a038300100389001a038300100389
001a038300100389001a038300100389001a038300100389001a03830010
0389001a038300100389001a0383fff50389fff5038300100389001a0383
00100389001a04b1006604b1006604b1006604b1006604b1006604b10066
04b1006604b1006604b1006604b1006604b1006604b1006604b1006604b1
006604b1006604b1006604b1006604b1006604b1006604b1006606750066
067500660675006606750066067500660675006606750066067500660675
006604a1002304a1ffc504a1fe8a04a1fe6204a1ff2204a1ffc604a1fe8b
04a1fe6204a1ff2204fc00ac04fcfef005d1fe8205d1fe7a0559feaa04fc
fef005d1fe8205d1fe7a0559feaa0550005e0550ff0605f2fe7b060dfe78
0599feaa0550ff0605f2fe7b0611fe7c0599feaa066500230665ffc50665
fe8a0665fe620665ff220665ffc60665fe8b0665fe620665ff2206c000ac
06c0fef00795fe820795fe7a06c0fe4d06c0fef00795fe820795fe7a06c0
fe4d0714005e0714ff0607b6fe7b07d1fe780714fe610714ff0607b6fe7b
07d5fe7c0714fe6101d9ffff01d900000289000002890000039a00000329
0000032900000324000003290000032900000324000003f4000003f40000
0324000001d9000003270000030c0000023200b601c4007901c4007901c4
0079054e00ac0440000a042200ac0366001b044100ac06b2005503ca004b
04a500ac045800ac046a001b050c000f052400ac05b100ac073800ac052b
00630444006103e6000f03e6001e03e6001e0476003005d2000f049a0074
04720074047200ad05f6002805f60028020400ac06680055045f00ac050e
000304fc00ac04fc00ac04720074070700ac04a1002304a10023061bffcc
03e8005905250064052500640668005503ca001503ca004b052200ac0522
00ac054c0063054c0063054c00630462004c0438000f0438000f0438000f
04720071035300ac061800ac0366001b048500300427003004400035065d
0037061d003d041a003d070f0003072800ac0515005b0521000f03ca005a
05090003045f009903df00270434009902f90027039f009905c0003e0362
004b03f4009903b6009903eb00270447000a0471009904d8009905f10099
046f00590362005a0319000a039d0022039d002203b2002904c5000a03ea
004203c0004203c0009904c8001904c800190583003e03cf009904210016
044700990454009903c0004205b6005f020400ac03d5002e03d50058062f
005c03fb005603fb006203fb00620583003e0362000803bc004b04530095
045300970438005a0431005a0431005a038b0004039f0022039f0022039f
002203c0002902c400990554009902f9002703b100290377002904340060
06550060059b004b03ba004b061f001606500099044500500481000a0362
005a042b001604a800a103e8002703c500a10314002703ec00a105d00044
03800057041c00a103ca00a103ca002704530017049800a1050100a10677
00a104a2006503cb006d0359001c0383001003830010041300360545001c
041a006d03fa006d03fa00a1054f0020054f002001ec00a10578004403ff
00a1045a0001047800a104a100a103fa006d062f00a103f4001003f40010
055cffe20380004204a2006504a200650578004403800003039000570489
00a0048900a004aa006604a9006604a9006603e4001e039d001e039d001e
039d001e03fa0044031400a1058300a1031400270417003603cc003603e8
004a0588004a0559007203d8007205d20001061900a10488006c0444001c
03800068045c00010400000008000000040000000800000002af00000200
0000015500000450000001bc00000199000001000000000000000000ffdc
0000ff2a040e0024040e00240329009003fcfff901ff008c0358008801c4
00540334005404a400540476010a03fcfffb0273004404ee004f04440061
0444006103ad0027040e005306640099052a0020076000ac064800ac071e
002005f500ac0428001b03e6000f08a80032043afffe0482002104b2005b
0495002003ad0020044400610621004906210065057800e6059d00e603fc
005e070100bc03fc0062045201d7045200be0400fff6040001bd040001bd
0400fff6040001bd0400fff6070900aa045c005b047200ad0444007104d0
003a0562007403c9001006640094042f005f04180015035a0053040b0030
0441006f03260010032700030327000303270003025400c0025400c00254
00c8025400c802aaff8c02aaff8c04e0005907f4000a07e2001407980003
076c0061064100ac050b002406a700ac05c80055073f00ac03ca00210600
009004b8001c085c0063054c003b076c0061076c006104440061056a0022
053400990433001b05af00990480001b060b0099034e001605a9009403d2
ffc40745005a049c005a06420059056a00220362005a06b8006d05c300a1
0453001205c000a1050b0046066400a10380002205580087042e002207f1
0066050f006806b0006d06b8006d039c006d03c7009602aa00db040e008d
0000ffdc0000fe5101cf0000022400bb01c700000163006102b1ff4b0aa0
00b404d5009202d5008302d5008304d500b202d500700aa000b40aa000b4
0aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40000
fc48000000000000fd170000000000000000039a0000039a000003240000
0324000003240000039a0000032400000324000002560000032900000329
000003bdffff02aaff8c055001e5027f008403240000039a000002560000
00000027000000e1000000ed0000001b0324000003240000032400000324
000003240000032400000324000003240000032400000324000000000000
000000000000000000000000039a0000039a0000034600000000002703c1
0000030f00000346000003460000039a0000034800000348000003a20000
03a2000002560000035f00000000009e00000067000000220000009e0000
009e0000009e0000009e0000009e0517fe820513fe7e049ffeaa03e6fe47
03e6fe4703e6000e03e6000e03f4001003f4001003f4001005b8001005b8
001005b80010047800a1047800a10478006f063c00a1063c00a1063c006f
0383ffc80383ffc80383001004b1006604b1006604b10066067500660675
0066067500660000fdbc0000fd1a0000fd770000fd4f0000fbfe0000fbfa
0000fc000000fbfa0000fc000000fbfa0000fc000000fbfa0000fc000000
fc000000fc000000fc000000fc000000fc000000fc000000fc000000fdd0
0000fc300000fc300000fbff0000fbff0000fbff0000fbff0000fbff0000
fc000000fcac0000fcad0000fcac0000fcac0000fd1b0000fd1b0000fd34
0000fd340000fd340000fd340000fd600000fd600000fd730000fd730000
fdcf0000fd5f0000fd5f0000fd5f0000fd5f0000fd7f0000fd7f0000fca1
0000fd6f0000fdfd0000fcef0000fcf20000fca00000fca00000fcae0000
fcad0000fc660000fca00000fc2f0000fc2f0000fc660000fc5f0000fdd0
0000fcf10000fd6d0000fcf30000fd710000fd710000fdb10000fc650000
fcf10000fcf10000fc2f0000fbff0000fd770000fc660000fc660000fc65
0000fc650000fc650000fc650000fc460000fd790000fcde0000fcde0000
fd4b0000fd4b0000fca80000fca80000fd710000fda60000fda60000fce3
0000fd4c0000fd4c0000fd4b0000fd4b0000fd7e0000fcdf0000fcde0000
fcde0000fc8f0000fc520000fc520000fc520000fc520000fc920000fc97
0000fc970000fc560000fc560000fc910000fd820000fd820000fd700000
fd700000fdfa0000fdfa0000fd5f0000fd5f0000fd790000fd790000fd8f
0000fd8f0000fd6e0000fd6e0000fd7a0000fd7a0000fcfb0000fcfb0000
fdb60000fdb60000fda80000fda80000fd680000fd680000fd710000fd71
0000fcf10000fcf10000fcf10000fcf10000fc540000fc260000fc260000
fc290000fc290000fc270000fc270000fc270000fc270000fc350000fc35
0000fc350000fc350000fdb60000fda80000fda80000fce30000fd460000
fd460000fd470000fd470000fd020000fd020000fd020000fd020000fc65
0000fc660000fc9f0000fc9f0000fc9f0000fc9f0000fca10000fca10000
fc9f0000fc9f0000fc9f0000fc9f0000fca10000fca10000fc370000fc37
0000fc370000fc370000fca00000fca00000fc9f0000fcad0000fd330000
fd470000fc9f0000fc9f0000fc9f0000fc9f0000fbff0000fc020000fbff
0000fc000000fc370000fc370000fc370000fc370000fdbd0000fdbd0000
fca20000fca30000fca30000fdd10000fdd10000fdd10000fdd10000fc6a
0000fc6a03e6fe940389ffcb0389ffcb0389001a01d60089043400600434
00600434006004340060043c0025067600250aa000b40aa000b40aa000b4
0aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4
0aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b40aa0
00b40aa000b40aa000b40aa000b40aa000b40aa000b40aa000b4047d00a3
040e0023040e0054040e001b040e002e0557001e040e001e075700260271
0024027100250430000004e300ac0366000f0476006203cb005a0438ffff
039fffe106d700ac04a10023053f00ac05a2005d02ca00350438005a0380
0072016dffd802f5001c03ad004703bf003b0254007801de006402540078
01de006404fc00ac04340099058b000f056d002103ca004b038f005a03c1
00220366001e046800220411001e035000a1034f0049084900230610005c
081400220671005c07cc0022063b005c068800230545005c068800230545
005c068800230545005c04440057036200500428001203a3ffe9042800ac
03a300990428001203a3ffe9040900ac027b0099035d001201d6fff6054c
ffe20438ffec05c8006304b9005a091b0063070f005a042200120434ffea
054e0037052e003705cc0014067800250562006304340060070c006305a4
0060041e00780335005004a7005303fd0032048a0022039d0022071e003e
05b8003503bc004b03a7004b0422001c0434ffea0422001c0434ffea03a3
00ac032000990346003c0346003c03df001e03700014042b005c042b005c
0262003c05690060031b009907a300990569009902ca0099051900a1034e
002103b70064054cfff604340061035f00ac02ca009903c4003503c40035
03c40035035d001201d60099052400ac04340099035f00ac02ca0099049f
005a03b7005a04fc00ac02fe0000054f00ac046200990461ffcc038dffe1
0362005a043400990504000f053f005003adffd602710025051e00630444
005a053800630437005a051e00630444005a050cffb803c4000804280008
03a30008052afffe0434001c0458002602ca000c03ad003a03210051058d
000f03ca004b053c006103ec00000428003003e6000f052e000a035b0024
047b00450664009903ad00590422005b06d700ac020400ac08d50022048a
fff2062f005c03a4006f03fbfff204c80015027100250434006002a60014
01d6ff1d01d6fffa06640099043400990434009903c7004903c70049043c
007406cc005a06cc005a06cc005a070f005a070f005a0401006403ed00a1
028d009903dd00990393001404a6001403b2003f057b003f01eaffd50434
009404a4002706640099066400990470fffa0369001203be001203690012
041a00290377ff4a041aff4a0377fef003510022030c008402e9006c01ee
0000015effc7031d00000434006004b100660655000305580016057900ac
056c009906550052062c00380562006304340060071e003d05b800350428
00ac03a300990721000305db0016073800ac060c0099051f00ac04500099
04d100ad043c00990512ffec0447ffc2096e000508030017049b0005040d
0017050b0003043c0016052400280000ff8f0000ff7e0000ff300000ff10
0000fefc0320007c0000ff2f0000ff310000ff530000ffb70000ff4c0000
ff4d0000ffad0000fec30000fdc5000000000000ff4d0000ff4d000000d5
0000fecb0000fe4b0000ff320000ff460000ff2f0000ff550000ff5e0000
ff4d0000feb70000ff660000ff4d0000ff320000ff2f0000ff5f0000ff55
000000000000fe4d0000ff37000000000000000000000000000000000000
0000000000000000000000000000000000000000ffb70000ffb700000000
0000000000000000000000000000ffb70000ffc3027300450000ff3101de
00a10000048400000057022400960000ffa80000ffa80000ff190000fe6e
02eb009400000000044b006a046b006a03f3002b02f30019038f0018048f
008c049a008c01da009902530018049d0099046e006b0477006b01da0099
0390001803a1001803ce002e0378001c04ae009904b3009904a5005404ad
005401da009902eb002b048b0028043100150427005b0439005b0454006d
0464006d037a002003e20019044b008c0451008c03900018058c004a0591
004a04d7003604e5003603b5009903b5009903b5009901ff002a0359002b
01da00990000ff0603b50099043100150577006904bb001805bb008c04fa
002e04a4001c05da009904bc00180603003603fc0046044b006a044b006a
046b006a03f3002b03f3002b02f3001902f30019038f0018038f0018049a
008c048f008c0242001e01da009901da00990299001e0477006b0242001e
039000180390001803a1001803ce002e03ce002e0378001c03adff6a03ad
ff6a04ad005402eb002b048b00280439005b0464006d0454006d03e20019
0451008c039000180591004a058c004a058c004a0591004a0591004a04e5
003604d7003603e8001c042f001d05f400ac03bf00370329005903bf0037
0329005903ad004703210051025000ac02320094050e008204010064055e
0050037d003208790063073500640440ffd703c2ffcd06d7000f05df000a
062600ac057b00990708006305c6005a06f000ac058d009904a10022039d
002205c800550480001b06f000ac059b009904c8001403d20022051c002c
0455001d05d20005050d001705b7000304d1001607a900ac05f70060054c
00630438005a054c00630438005a091b0063070f005a0655007e0000fea2
07e2006f074b00c807e2002603d1007d0000006400000064000000640000
0064000000640000006400000064000000640000fe480000ff32036e0000
025b005e052700010477001703b700470338005107c9004b06c2004b0706
007405e6004205b5000104ed00170530000f043d000a03e6000f0319000a
051c00ac0468008503e6000f0319000a05340014048c0014047200ad0434
0099071a00ac060f0099091b0063070f005a054c00630431005a03a20064
02e5006400000064040900ac036d009903e6000f03190014052200ac0453
0099028d0007042800ac045a00ac042200ac0422005b04ec00ac03e6000f
03e6000f050c005b042800ac04280030028d0007044400610444003803bf
003b03ad00ac03ad005906d700ac052a00ac035d00ac03ad0047045800ac
0458004d04950024048a002204fc00ac050c0094028d00a9071e003d0427
003003e6001e045a005904a1002304a1002303e800ac03e8006c020400ac
054c0063052200aa052200aa035d001204ec005d02050097020500970395
00970395009702000097020000970454006403970064053d004b0500000c
083b003205c30031038200310a1500320a1a00320000fff6042d004b042d
004b06cc000005aa00c806f400c803d300620266006a033e004507640031
045900000266006a01ffffa8037e006a03ca0075005fffa8041001800410
0157041000ba04100047041000c3041000b5041000950410004c0410004c
041000aa057300c8022300490243007103400056035b00c50a6d008405ce
00a3045f00880410018004100155041000b8041000430410006f04100076
041000930410004c0410004c041000aa024400b102820085035a00850175
009c0200008c0200008c02bf008c02bf008c02bf008c02bf008c02bf008c
02bf008c02d0009602d00096020f007b0201008c0201008c02180071031e
009e031e009e0282ffa80282ffa80282ffa804be006704be00d202820068
0282ffa80282002d02a000000282005b0282006c0282ffa8028200680282
ffa80282006d0282ffa80282006a0282ffa8028200ab0282ffa80410007d
041000c701ee006f0243006f03470070040600540350006f0360005d038e
003903ea003903ea00390364003901ee006f0243006f0347007004060054
03d9007003dd005d0393003803ea003903ea0039036400390398005d0329
003c027000d2027000b6027000490270001e0270004a027000410270002c
0270001b0270001b02700039027000130270001702700023027000200270
0045027000120270003702700025027000260270001e0270002802700019
0270001b0270001402700019026600de026600c302660069026600250266
006c02660068026600580266002b0266002b026600640266003c02660042
0266005702660048026600750266003e0266005e0266004f0266004f0266
002e026600510266004402660047026600400266004404c4003100000000
0000000004c4003104c400310000ffa80000fef50000fef90000fee40000
fef50000fe1e0000ff090000fe840000ff310000ff5e0000ff4a0000ff5e
0000ff220000feeb0000ff170000ff2a0000ff490000ff250000ff290000
ff650000ff120000ff4b0000ff480000ffaa0000ff480000ff440000ff21
0000ff350000ff370000ff930000ff490000ff2a0000ff150000ffad0000
fe390000fe920000ff030000ff190000ff3b0000ff220000fe9f0000ff7b
0000ff890000ff480000ff6a0000fe9f0000ff120000febb0000ff2a0000
ff610000ff610000ff840000ff690000ff480000ff290000ff220000ff29
0000ff1e0000ff150000ff300000ffb20000ff4c0000ff3a0000ffb20000
ff4c0000ff3a0000fee50000feda0000fee50000ff620000ff1e0000ff2a
0000ff250000ff980000ff980000ff980000ff980000ff2d0000fed20000
ff470000ff170000ff6f0000fefc0000ff0b0000ff230000ff290000ff21
0000ff240000ff150000ff2a0000ff220000ff3c0000fefc0000ff480000
ff130000ff070276000001790005018500250185007f0179ffd10179ffda
0185fffa0225007f0179ffc70179ffcb01deffbc01dd000401de005d01de
007f01ddffe001ddffd901de003201de007f01ddffc001ddffc40669004c
0669004c0669004c0669004c0669004c0669004c0669004c0669004c0669
004c0669004c0669004c0669004c0669004c0669004c0669004c0669004c
0669004c0669004c0669004c0669004c0669004c01f6ffa801f6ffa801f6
ffa801f6ffa801f6ffa801f6ffa801f6ffa801f6ffa801f6ffa801f6ffa8
01f6ffa801f6ffa801f6ff9501f6ffa801f6ffa801f6ffa801f6ffa801f6
ffa801f6ffa801f6ffa801f6ffa80251ffa80251ffa80251ffa80251ffa8
0251ffa80251ffa80251ffa80251ffa80251ffa80251ffa80251ffa80251
ffa80251ff9d0251ffa80251ffa80251ffa80251ffa80251ffa80251ffa8
0251ffa80251ffa806e2004c06e2004c06e2004c06e2004c06e2004c06e2
004c06e2004c06e2004c06e2004c06e2004c06e2004c06e2004c06e2004c
06e2004c06e2004c06e2004c06e2004c06e2004c06e2004c06e2004c06e2
004c04ca004c04ca004c04ca004c04ca004c04ca004c04ca004c04ca004c
04ca004c04ca004c04ca004c04ca004c04ca004c04ca004c04ca004c04ca
004c04ca004c04ca004c04ca004c04c5ffa804c5ffa804c5ffa804c5ffa8
04c5ffa804c5ffa804c5ffa804c5ffa804c5ffa804c5ffa804c5ffa804c5
ffa804c5ffa804c5ffa804c5ffa804c5ffa804c5ffa804c5ffa8051dffa8
051dffa8051dffa8051dffa8051dffa8051dffa8051dffa8051dffa8051d
ffa8051dffa8051dffa8051dffa8051dffa8051dffa8051dffa8051dffa8
051dffa8051dffa804ba004c04ba004c04ba004c04ba004c04ba004c04ba
004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c04ba004c
04ba004c04ba004c04ba004c04ba004c04ba004c03470058034700580347
005803470058034700580347005803470058034700580347005803470058
034700580347005803470058034700580347005803f1005703f1005703f1
005703f1005703f1005703f1005703f1005703f1005703f1005703f10057
03f1005703f1005703f1005703f1005703f1005703580000035800000358
000003580000035800000358000003580000035800000358000003580000
035800000358000003580000035800000358000003580000036d00000358
000003a9000003a9000003a9000003a9000003a9000003a9000003a90000
03a9000003a9000003a9000003a9000003a9000003a9000003a9000003a9
000003a9000003a0000003a90000072b004c072b004c072b004c072b004c
072b004c072b004c072b004c072b004c072b004c072b004c072b004c0507
ffa80507ffa80507ffa80507ffa80507ffa80507ffa80507ffa80507ffa8
0507ffa80507ffa80507ffa80566ffa80566ffa80566ffa80566ffa80566
ffa80566ffa80566ffa80566ffa80566ffa80566ffa80566ffa80791004c
0791004c0791004c0791004c0791004c0791004c0791004c0791004c0791
004c0791004c0791004c0846004c0846004c0846004c0846004c0846004c
0846004c0616ffa80616ffa80616ffa80616ffa80616ffa80616ffa8063a
ffa8063affa8063affa8063affa8063affa8063affa80865004c0865004c
0865004c0865004c0865004c0865004c061c003b061c003b061c003b061c
003b04d5ffa804d5ffa804d5ffa804d5ffa804f4ffa804f4ffa804f4ffa8
04f4ffa8063b003b063b003b063b003b063b003b04b5004c04b5004c04b5
004c04b5004c04b5004c04b5004c04b5004c04b5004c03dfffa803dfffa8
03dfffa803dfffa803dfffa803dfffa803dfffa803dfffa8038effa8038e
ffa8038effa8038effa8038effa8038effa8038effa8038effa80401004c
0401004c0401004c0401004c0401004c0401004c0401004c0401004c06c8
004c06c8004c06c8004c06c8004c06c8004c06c8004c06c8004c06c8004c
06c8004c06c8004c02dbffa802dbffa802dbffa802dbffa802dbffa802db
ffa802dbffa802dbffa802dbffa802dbffa80351ffa80351ffa80351ffa8
0351ffa80351ffa80351ffa80351ffa80351ffa80351ffa80351ffa8072f
004c072f004c072f004c072f004c072f004c072f004c072f004c072f004c
072f004c072f004c04f9004c04f9004c04f9004c04f9004c04f9004c02db
ffa802dbffa802dbffa802dbffa802dbffa80351ffa80351ffa80351ffa8
0351ffa80351ffa80506004c0506004c0506004c0506004c0506004c0556
003b0556003b0556003b0556003b0556003b0556003b0720004c0720004c
0720004c0720004c0720004c0720004c0720004c0720004c0720004c0720
004c0720004c0720004c0720004c0720004c03bdffa803bdffa803bdffa8
03bdffa803bdffa803bdffa803bdffa803bdffa803bdffa803bdffa803bd
ffa803bdffa803bdffa803bdffa803beffa803beffa803beffa803beffa8
03beffa803beffa803baffa803baffa803baffa803baffa803baffa803ba
ffa803baffa803baffa803baffa803baffa803baffa803baffa803baffa8
03baffa803baffa803baffa803baffa803baffa803baffa803baffa80635
004c0635004c0635004c0635004c0635004c0635004c0736004c0736004c
0736004c0736004c0736004c0736004c0736004c0736004c0736004c0736
004c0736004c0736004c0736004c0736004c08d9003b07a5ffa807d4ffa8
0909003b045f004c0469004c0469004c0469004c045f004c045f004c045f
004c01cdffa801d9ffa801d9ffa801d9ffa801cdffa801cdffa801cdffa8
020cffa8020cffa8020cffa8020cffa8020cffa8020cffa8020cffa804ad
004c04ad004c04ad004c04ad004c04ad004c04ad004c04ad004c036e0059
036e0059036e0059036e0059032fffa8032fffa8032fffa8032fffa80392
ffa80392ffa80392ffa80392ffa804140059041400590414005904140059
045b004c045b004c045b004c045b004c045b004c045b004c045b004c045b
004c045b004c01f6ffa801f6ffa801f6ffa801f6ffa801f6ffa801f6ffa8
01f6ffa801f6ffa801f6ffa80251ffa80251ffa80251ffa80251ffa80251
ffa80251ffa80251ffa80251ffa80251ffa80495004c0495004c0495004c
0495004c0495004c0495004c0495004c0495004c0495004c0524003b0524
003b039e004c0524003b040fffa80411ffa801f6ffa80411ffa8033effa8
033effa802dcffa8033effa80378004c052e003b0378004c052e003b02c6
004c02c6004c02c6004c02c6004c02c6004c0378004c0378004c039e004c
039e004c0378004c037a0000037a0000037a0000037a0000037a0000037a
0000037a0000037a0000037a0000037a0000037a0000037a0000037a0000
037a0000037a0000037a00000317004c03cb000003cb000003cb000003cb
000003cb000003cb000003cb000003cb000003cb000003cb000003cb0000
03cb000003cb000003cb000003cb000003cb000002c9004c055b004c055b
004c055b003b055b0031055b0031055b004c055b004c055b004c055b004c
055b0039055b004c055b004c055b004c055b004c055b004c055b004c055b
004c01f6ffa801f6ffa801f6ffa801f6ffa801f6ffa801f6ffa801f6ffa8
01f6ffa801f6ffa801f6ffa801f6ffa801f6ffa801f6ffa801f6ffa801f6
ffa801f6ffa801f6ffa80251ffa80251ffa80251ffa80251ffa80251ffa8
0251ffa80251ffa802abffa80251ffa80251ffa80251ffa80251ffa80251
ffa80251ffa80251ffa80251ffa80251ffa80497004c0497004c0497004c
04970046049700460497004c0497004c0497004c0497004c0497004c0497
004c0497004c0497004c0497004c0497004c0497004c0497004c055bff3b
044bff0007dc004c07dc004c0306004c02d0001507dc004c07dc004c01f6
ffa801f6ffa80251ffa80251ffa802d0001502d000150301007f0301007f
036e005903d8007f0433007f0562004c05bc004c05a90000060b000005a9
0000060b000005a90000060b000005a90000060b000004fa000005ab0000
0441ffa804fa000005ab00000441ffa80467004c0467004c01de007f0185
007f043affd9043afffd0458003b0458003b04d4000304d4003b04f2003b
04f2003b08a4004b072c004b08a4004b072c004b09e90030083f006b0763
005f06cd0000095500000960ffe4096000000960fffe0930ffff0185ffd9
01de000402d2007c02d2007c0179007f01dd007f0469004c01d9ffa8020c
ffa804ad004c04f5003b04f5003b04f5003b04f5003b054e003b054e003b
054e003b054e003b04f5003b05ab000005ab00000400ffa80444ffa80444
ffa80556003b0556003b0373000003730000037300000373000003730000
037300000373000003730000037300000373000003730000037300000373
000003730000037300000373000003a00000037300000387000003870000
038700000387000003870000038700000387000003870000038700000387
000003870000038700000387000003870000038700000387000003470058
034700580347005803470041034700580347005803470058035800000358
000006c8004c06c8004c06c8004c06c8004c06c8004c06c8004c02dbffa8
02dbffa802dbff8d02dbff6f02dbffa802dbffa802dbffa803bdffa803bd
ffa803bdffa803bdffa803beffa803beffa801cdff2f032fffa801f6ff89
04f5003b03b4ffa802dcff2802dcff2802dcff2802dcff2802dcff2802dc
ff28032dffa8032dffa8032dffa8032dffa8032dffa8032dffa80245ff28
0245ff280245ff280245ff280243ff280243ff2801f6ffa801f6ffa801f6
ffa801f6ff3301f6ff2301f6fed101f6ffa801f6ff5c01f6ff5c01f6ff22
01f6ff5d01f6ff5501f6ffa801f6ffa801f6ffa801f6ff3301f6ff2201f6
ff9401f6ff2201f6ff2201f6ff2201f6ff2201f6ff2201f6ff2201f6ffa8
01f6ff3301f6ff2201f6ff2201f6ff4e01f6ff2201f6ff2201f6ff2201f6
ff2201f6ffa801f6ffa801f6ffa801f6ffa401f6ff9401f6ff4101f6ffa8
01f6ffa501f6ffa501f6ff9201f6ff9c01f6ff9b01f6ffa801f6ffa801f6
ffa801f6ffa401f6ff9201f6ffa801f6ff9201f6ff9201f6ff9201f6ff93
01f6ff9201f6ff9201f6ffa801f6ffa401f6ff9201f6ff9201f6ff9201f6
ff9201f6ff9201f6ff9201f6ff920251ffa80251ffa80251ffa80251ffa4
0251ff940251ff410251ffa80251ffa50251ffa50251ff920251ff9c0251
ff9b0251ffa80251ffa80251ffa80251ffa40251ff920251ffa80251ff92
0251ff920251ff920251ff930251ff920251ff920251ffa80251ffa40251
ff920251ff920251ff920251ff920251ff920251ff920251ff9201fbffa8
01fbffa801fbffa801fbffa801fbffa801fbffa801fbffa801fbffa801fb
ffa801fbffa801fbffa801fbffa801fbffa801fbff9501fbffa801fbffa8
01fbffa801fbffa801fbffa801fbffa801fbffa801fbffa801fbffa801fb
ffa801fbffa801fbffa801fbffa801fbffa801fbffa801fbffa801fbffa8
01fbffa801fbffa801fbffa801fbffa801fbffa801fbffa801fbffa801fb
ffa801fbffa801fbffa801fbffa801fbffa801fbffa801fbffa801fbffa8
01fbffa801fbffa801fbffa801fbffa80233ffa80233ffa80233ffa80233
ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233ffa8
0233ffa80233ff9d0233ffa80233ffa80233ffa80233ffa80233ffa80233
ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233ffa8
0233ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233
ffa80233ffa80233ffa80233ffa80255ffa80233ffa80233ffa80233ffa8
0233ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233
ffa801fbffa801fbffa801fbffa801fbff3301fbff2301fbfed101fbffa8
01fbff5c01fbff5c01fbff2201fbff5d01fbff8801fbffa801fbffa801fb
ffa801fbff3301fbff2201fbff9401fbff2201fbff2201fbff2201fbff22
01fbff2201fbff2201fbffa801fbff3301fbff2201fbff2201fbff5201fb
ff2201fbff2201fbff2201fbff2201fbffa801fbffa801fbffa801fbffa4
01fbff9401fbff4101fbffa801fbffa501fbffa501fbff9201fbff9c01fb
ff9b01fbffa801fbffa801fbffa801fbffa401fbff9201fbffa801fbff92
01fbff9201fbff9201fbff9301fbff9201fbff9201fbffa801fbffa401fb
ff9201fbff9201fbff9201fbff9201fbff9201fbff9201fbff920233ffa8
0233ffa80233ffa80233ffa40233ff940233ff410233ffa80233ffa50233
ffa50233ff920233ff9c0233ff9b0233ffa80233ffa80233ffa80233ffa4
0233ff920233ffa80233ff920233ff920233ff920233ff930233ff920233
ff920233ffa80233ffa40233ff920233ff920233ff920233ff920233ff92
0233ff920233ff9202dcff2802dcff2802dcff2802dcff2802dcff2802dc
ff2802dcff2802dcff2802dcff2802dcff2802dcff2802dcff2802dcff28
02dcff2802dcff2802dcff2802dcff2802dcff2802dcff2802dcff2802f3
ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff27
02f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3
ff2702f3ff2702f3ff2702f3ff2702f3ff27032dffa8032dffa8032dffa8
032dffa8032dffa8032dffa8032dffa8032dffa8032dffa8032dffa8032d
ffa8032dffa8032dffa8032dffa8032dffa8032dffa8032dffa8032dffa8
032dffa8032dffa803baffa803baffa803baffa803baffa803baffa803ba
ffa803baffa803baffa803baffa803baffa803baffa803baffa803baffa8
03baffa803baffa803baffa803baffa803baffa803baffa803baffa80245
ff280245ff280245ff280245ff280245ff280245ff280245ff280245ff28
0245ff280245ff280245ff280245ff280245ff280245ff280243ff280243
ff280243ff280243ff280243ff280243ff2802f3ff2702f3ff2702f3ff27
02f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3
ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff2702f3ff27
02f3ff2702f3ff270694004c0694004c0694004c0694004c0694004c0694
004c0694004c0694004c0694004c0694004c0694004c0694004c0694004c
0694004c0736004c0736004c0736004c0736004c0736004c0736004c0736
004c0736004c0736004c0736004c0736004c0736004c0736004c0736004c
0668004c0668004c0668004c0668004c03d0004c03d0004c03d0004c03d0
004c0185ffc70185ff9601de005d01de003201f6ffa801f6ffa801f6ffa8
01f6ffa801f6ffa801f6ff8201f6ffa801f6ffa801f6ff8201f6ff8201f6
ffa801f6ffa801f6ff8201f6ff8201f6ff9401f6ff8201f6ff820251ffa8
0251ffa80251ffa80251ffa80251ffa80251ffa80251ffa80251ffa80251
ffa80251ffa80251ffa80251ffa80251ffa80251ffa80251ffa80251ffa8
01fbffa801fbffa801fbffa801fbffa801fbffa801fbff8201fbffa801fb
ffa801fbff8201fbff8201fbffa801fbffa801fbff8201fbff8201fbff94
01fbff8201fbff820233ffa80233ffa80233ffa80233ffa80233ffa80233
ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233ffa80233ffa8
0233ffa80233ffa80233ffa804c5ffa804c5ffa804c5ffa804c5ffa804c5
ffa804c5ffa804c5ffa804c5ffa8051dffa8051dffa8051dffa8051dffa8
051dffa8051dffa8051dffa8051dffa803470058034700580347005803f1
005703f1005703f100570507ffa80566ffa802dbffa80351ffa803b4ffa8
0458003b04f2003b0458003b04f2003b0282ffa80000feb70000fef50000
fef90000fee40000fef50000fe1e0000ff090000fe840000ff310000ff5e
0000ff500000ff5b0000ff2a0000feeb0000ff2b0000ff2a0000ff490000
ff2a0000ff2d0000ff650000ff120000ff4e0000ff4e0000ffb10000ff49
0000ff440000ff210000ff350000ff370000ff9e0000ff490000ff2a0000
ff150000ffb10000fe390000fe920000ff060000ff2c0000ff3b0000ff21
0000fe9f0000ff7b0000ff950000ff480000ff6a0000fe9f0000ff120000
fec80000ff2d0000ff680000ff680000ff8b0000ff690000ff490000ff29
0000ff220000ff290000ff1d0000ff1c0000ff2a0000ffba0000fedf0000
feda0000fed90000ff620000ff140000ff2a0000ff2a0000ff980000ff98
0000ff980000ff980000ff2d0000feda0000ff4f0000ff1f0000ff6f0000
fefc0000ff1f0000ff270000ff2d0000ff210000ff2d0000ff190000ff2a
0000ff2a0000ff3c0000fefc0000ff4e0000ff180000ff1504be006704be
00ee0a07006b0321ffa80341001e0242001e02280071024c006a024c006a
0000ff1d042d004b0000ff8e0000ff2d0000ff870000ff490000ff2d0000
ff2c0000ff560000ff240000ff990000ff420000ff970000ff3f0000ff92
0000ff620000ff3f0000ff3e0000ff650000ff2e0000ffac0000ff660000
ff840000fef40000ff480000ff480000ff1d0000ff350000ff560000ff37
0000ff560000ff090000ff090000ff1d0000fe760000fe760000ff5f0000
ff5f0000000f0000000f0000ff9f0000ffae0000ff770000ff6c0000ff59
0000ff6e0000ff000000ff8e0000ff2d0000ff870000ff2d0000ff2c0000
fec10000ff240000ff990000ff350000ff3f0000ff920000ff3f0000ff3e
0000fedc0000ff2e0000ff9f0000ff570000ffa00000ff4f0000ff4e0000
ff240000ff480000ff1d0000ff350000ff5a0000ff370000ff560000ff09
0000ff090000ff1d0000ff240000fefb0000ff720000ff770000ff770000
ff770000ff6e0000ff740458003b043a003b0461003b0443003b04f2003b
04d4003b04f2003b04d4003b05370004080700000866000009380000095d
0000055500000811ffdc0870ffdb0942ffdc0968ffdb0648004c0543004c
05f7004c0659004c07d6004c0833004c08b7004c0941004c09c9004c09cf
004c08f2004c0910004c073b004c0683004c053e004c0694004c0637004c
0585004c0647004c0647004c0557004c0557004c060c004c060b004c0617
004c075b004c077b004c079e004c07fa004c077b004c0813004c079e004c
078e004c09e4004c09d7004c068a004c048a004c071e004c06a4004c074a
004c0788004c0865004c084a004c0720004c06a8004c0720004c04ad004c
0722004c0453004c0688004c0688004c04a5004c04a5004c0688004c0688
004c0405004c0405004c0720004c051a004c0720004c0720004c05f5004c
0720004c0930004c091a004c04ba004c04cd004c064b004c070a004c0825
004c067a004c0624004c04e1004c051c004c04a5004c055a004c04ce004c
04a5004c04a5004c04ba004c04ba004c045e004c045e004c052e004c0570
004c0626004c0626004c05f5004c0668004c08f0004c07ed004c0960003b
0000ffaaff77000000010000192a043a00170108000800020010002f0087
00001236ffff0004000100>
<0000000e00ae000000030000000002100000000000030000000700760210
0001000000000000010802860001000000000003000e038e000100000000
0004000e039c0001000000000006000e03aa0001000000000007003b03b8
0003000004090001001c03f30003000004090002000e040f000300000409
0003001c041d0003000004090004001c04390003000004090006001c0455
0003000104090000006404710003000104090007007604d500a900200032
0030003100370020004d006900630072006f0073006f0066007400200043
006f00720070006f0072006100740069006f006e002e00200041006c006c
002000520069006700680074007300200052006500730065007200760065
0064002e000d0048006500620072006500770020004f00700065006e0054
0079007000650020004c00610079006f007500740020006c006f00670069
006300200063006f0070007900720069006700680074002000a900200032
0030003000330020002600200032003000300037002c002000520061006c
00700068002000480061006e0063006f0063006b002000260020004a006f
0068006e00200048007500640073006f006e002e00200054006800690073
0020006c00610079006f007500740020006c006f00670069006300200066
006f00720020004200690062006c006900630061006c0020004800650062
0072006500770020006900730020006f00700065006e00200073006f0075
00720063006500200073006f00660074007700610072006500200075006e
00640065007200200074006800650020004d004900540020004c00690063
0065006e00730065003b002000730065006500200065006d006200650064
0064006500640020006c006900630065006e007300650020006400650073
006300720069007000740069006f006e00200066006f0072002000640065
007400610069006c0073002e00430061006c006900620072006900200069
007300200061002000740072006100640065006d00610072006b0020006f
006600200074006800650020004d006900630072006f0073006f00660074
002000670072006f007500700020006f006600200063006f006d00700061
006e006900650073002ea92032303137204d6963726f736f667420436f72
706f726174696f6e2e20416c6c205269676874732052657365727665642e
0d486562726577204f70656e54797065204c61796f7574206c6f67696320
636f7079726967687420a92032303033202620323030372c2052616c7068
2048616e636f636b2026204a6f686e20487564736f6e2e2054686973206c
61796f7574206c6f67696320666f72204269626c6963616c204865627265
77206973206f70656e20736f7572636520736f66747761726520756e6465
7220746865204d4954204c6963656e73653b2073656520656d6265646465
64206c6963656e7365206465736372697074696f6e20666f722064657461
696c732e43484e48414f2b43616c6962726943484e48414f2b43616c6962
726943484e48414f2b43616c6962726943616c6962726920697320612074
726164656d61726b206f6620746865204d6963726f736f66742067726f75
70206f6620636f6d70616e6965732e00430048004e00480041004f002b00
430061006c00690062007200690052006500670075006c00610072004300
48004e00480041004f002b00430061006c00690062007200690043004800
4e00480041004f002b00430061006c006900620072006900430048004e00
480041004f002b00430061006c006900620072006900a900200032003000
3100370020004d006900630072006f0073006f0066007400200043006f00
720070006f0072006100740069006f006e002e00200041006c006c002000
520069006700680074007300200052006500730065007200760065006400
2e00430061006c0069006200720069002000690073002000610020007400
72006100640065006d00610072006b0020006f0066002000740068006500
20004d006900630072006f0073006f00660074002000670072006f007500
700020006f006600200063006f006d00700061006e006900650073002e00
0000b10903415302c802c60038001f02c702c60038001f02dd003802da00
5502d9003802d7005502d8003802d7005502d6003802d5005502d4003802
d3005502d2003802d1005502bf003802be005502bd003802bc0055000402
db003402db005402db0003003402db005402db006402db00a402db00d402
db0005006b02d50001000b02d10001001402c2004402c2006402c2007402
c2009402c2000500a402be000100a402bc000100200284b40918014a20b8
0283b40918014a20b80282b40918014a20b80281b40918014a20b80280b4
0918014a20b8027fb40918014a20b8027eb40918014a20b8027db4091801
4a20b8027cb40918014a20b8027bb40918014a20b8027ab40918014a20b8
0279b40918014a20b80278b40918014a20b80277b40918014a20b80276b4
0918014a20b80275b40918014a20b80274b40918014a20b80273b4091801
4a20b80271b40918014a20b80270b40918014a20b8026fb40918014a20b8
026eb40918014a20b8026db40918014a20b8026cb40918014a20b8026bb4
0918014a20b8026ab40918014a20b80269b40918014a20b80268b4091801
4a20b80267b40918014a20b80266b40918014a20b80265b40918014a20b8
0264b40918014a20b80263b40918014a20b80262b40918014a20b80261b4
0918014a20b80260b40918014a20b8025fb40918014a20b8025eb4091801
4a20b8025db40918014a20b8025cb40918014a20b8025bb40918014a20b8
025ab40918014a20b80259b40918014a20b80258b40918014a20b80257b4
0918014a20b80256b40918014a20b80255b40918014a20b80254b4091801
4a20b80253b40918014a20b80252b40918014a20b80251b40918014a20b8
0250b40918014a20b8024fb40918014a20b8024eb40918014a20b8024db4
0918014a20b8024cb40918014a20b8024bb40918014a20b8024ab4091801
4a20b80249b40918014a20b80248b40918014a20b80247b40918014a20b8
0246b40918014a20b80245b40918014a20b80244b40918014a20b80243b4
0918014a20b80242b40918014a20b80241b40918014a20b80240b4091801
4a20b8023fb40918014a20b8023eb40918014a20b8023db40918014a20b8
023cb40918014a20b8023bb40918014a20b8023ab40918014a20b80239b4
0918014a20b80238b40918014a20b80237b40918014a20b80236b4091801
4a20b80235b40918014a20b80234b40918014a20b80233b40918014a20b8
0232b40918014a20b80231b40918014a20b80230b40918014a20b8022fb4
0918014a20b8022eb40918014a20b8022db40918014a20b8022cb4091801
4a20b8022bb40918014a20b8022ab40918014a20b80229b40918014a20b8
0228b40918014a20b80227b40918014a20b80226b40918014a20b80225b4
0918014a20b80224b40918014a20b80223b40918014a20b80222b4091801
4a20b80221b40918014a20b80220b40918014a20b8021fb40918014a20b8
021eb40918014a20b8021db40918014a20b8021cb40918014a20b8021bb4
0918014a20b8021ab40918014a20b80219b40918014a20b80218b4091801
4a20b80217b40918014a20b80216b40918014a20b80215b40918014a20b8
0214b40918014a20b80213b40918014a20b80212b40918014a20b80211b4
0918014a20b80210b40918014a20b8020fb40918014a20b8020eb4091801
4a20b8020db40918014a20b8020cb40918014a20b8020bb40918014a20b8
020ab40918014a20b80209b40918014a20b80208b40918014a20b80207b4
0918014a20b80206b40918014a20b80205b40918014a20b80204b4091801
4a20b80203b40918014a20b80202b40918014a20b80201b40918014a20b8
0200b40918014a20b801ffb40918014a20b801feb40918014a20b801fdb4
0918014a20b801fcb40918014a20b801fbb40918014a20b801fab4091801
4a20b801f9b40918014a20b801f8b40918014a20b801f7b40918014a20b8
01f6b40918014a20b801f5b40918014a20b801f4b40918014a20b801f3b4
0918014a20b801f2b40918014a20b801f1b40918014a20b801f0b4091801
4a20b801efb40918014a20b801eeb40918014a20b801edb40918014a20b8
01ecb40918014a20b801ebb40918014a20b801eab40918014a20b801e9b4
0918014a20b801e8b40918014a20b801e7b40918014a20b801e6b4091801
4a20b801e5b40918014a20b801e4b40918014a20b801e3b40918014a20b8
01e2b40918014a20b801e1b40918014a20b801e0b40918014a20b801dfb4
0918014a20b801deb40918014a20b801ddb40918014a20b801dcb4091801
4a20b801dbb40918014a20b801dab40918014a20b801d9b40918014a20b8
01d8b40918014a20b801d7b40918014a20b801d6b40918014a20b801d5b4
0918014a20b801d4b40918014a20b801d3b40918014a20b801d2b4091801
4a20b801d1b40918014a20b801d0b40918014a20b801cfb40918014a20b8
01ceb40918014a20b801cdb40918014a20b801ccb40918014a20b801cbb4
0918014a20b801cab40918014a20b801c9b40918014a20b801c8b4091801
4a20b801c7b40918014a20b801c6b40918014a20b801c5b40918014a20b8
01c4b40918014a20b801c3b40918014a20b801c2b40918014a20b801c1b4
0918014a20b801c0b40918014a20b801bfb40918014a20b801beb4091801
4a20b801bdb40918014a20b801bcb40918014a20b801bbb40918014a20b8
01bab40918014a20b801b9b40918014a20b801b8b40918014a20b801b7b4
0918014a20b801b6b40918014a20b801b5b40918014a20b801b4b4091801
4a20b801b3b40918014a20b801b2b40918014a20b801b1b40918014a20b8
01b0b40918014a20b801afb40918014a20b801aeb40918014a20b801adb4
0918014a20b801acb40918014a20b801abb40918014a20b801aab4091801
4a20b801a9b40918014a20b801a8b40918014a20b801a7b40918014a20b8
01a6b40918014a20b801a5b40918014a20b801a4b40918014a20b801a3b4
0918014a20b801a2b40918014a20b801a1b40918014a20b801a0b4091801
4a20b8019fb40918014a20b8019eb40918014a20b8019db40918014a20b8
019cb40918014a20b8019bb40918014a20b8019ab40918014a20b80199b4
0918014a20b80198b40918014a20b80197b40918014a20b80196b4091801
4a20b80195b40918014a20b80194b40918014a20b80193b40918014a20b8
0192b40918014a20b80191b40918014a20b80190b40918014a20b8018fb4
0918014a20b8018eb40918014a20b8018db40918014a20b8018cb4091801
4a20b8018bb40918014a20b8018ab40918014a20b80189b40918014a20b8
0188b40918014a20b80187b40918014a20b80186b40918014a20b80185b4
0918014a20b80184b40918014a20b80183b40918014a20b80182b4091801
4a20b80181b40918014a20b80180b40918014a20b8017fb40918014a20b8
017eb40918014a20b8017db40918014a20b8017cb40918014a20b8017bb4
0918014a20b8017ab40918014a20b80179b40918014a20b80178b4091801
4a20b80177b40918014a20b80176b40918014a20b80175b40918014a20b8
0174b40918014a20b80173b40918014a20b80172b40918014a20b80171b4
0918014a20b80170b40918014a20b8016fb40918014a20b8016eb4091801
4a20b8016db40918014a20b8016cb40918014a20b8016bb40918014a20b8
016ab40918014a20b80169b40918014a20b80168b40918014a20b80167b4
0918014a20b80166b40918014a20b80165b40918014a20b80164b4091801
4a20b80163b40918014a20b80162b40918014a20b80161b40918014a20b8
0160b40918014a20b8015fb40918014a20b8015eb40918014a20b8015db4
0918014a20b8015cb40918014a20b8015bb40918014a20b8015ab4091801
4a20b80159b40918014a20b80158b40918014a20b80157b40918014a20b8
0156b40918014a20b80155b40918014a20b80154b40918014a20b80153b4
0918014a20b80152b40918014a20b80150b40918014a20b8014fb4091801
4a20b8014eb40918014a20b8014cb40918014a20b8014bb40918014a20b8
014ab40918014a20b80149b40918014a20b80148b40918014a20b80147b4
0918014a20b80146b40918014a20b80145b40918014a20b80144b4091801
4a20b80143b30918014ab80284b21e3e1fb80283b21e151fb80282b21e3e
1fb80281b21e3a1fb80280b21e3e1fb8027fb21e3e1fb8027eb21e0c1fb8
027db21e3e1fb8027cb21e3e1fb8027bb21e3e1fb8027ab21e3e1fb80279
b21d411fb80278b21d431fb80277b21d431fb80276b21d431fb80275b21d
411fb80274b21d431fb80273b21d431fb80272b21d411fb80271b21d421f
b80270b21d421fb8026fb21d421fb8026eb21d431fb8026db21d431fb802
6cb21d431fb8026bb21c451fb8026ab21c451fb80269b21c451fb80268b2
1c451fb80267b21c451fb80266b21c441fb80265b21c451fb80264b21c45
1fb80263b21c451fb80262b21c451fb80261b21c451fb80260b21c451fb8
025fb21c451fb8025eb21c441fb8025db21c451fb8025cb21c451fb8025b
b21c451fb8025ab21c451fb80259b21c451fb80258b21c451fb80257b21c
451fb80256b21c451fb80255b21c451fb80254b21c451fb80253b21c451f
b80252b21c451fb80251b21c451fb80250b21c451fb8024fb21c451fb802
4eb21c451fb8024db21c451fb8024cb21c451fb8024bb21c451fb8024ab2
1b491fb80249b21b491fb80248b21b4a1fb80247b21b4a1fb80246b21b4b
1fb80245b21b4c1fb80244b21b4c1fb80243b21b4c1fb80242b21b4b1fb8
0241b21b491fb80240b21b491fb8023fb21b4a1fb8023eb21b4a1fb8023d
b21b4a1fb8023cb21b4b1fb8023bb21b4b1fb8023ab21b4c1fb80239b21b
4c1fb80238b21b4c1fb80237b21b4c1fb80236b21b4c1fb80235b21b491f
b80234b21b491fb80233b21b4a1fb80232b21b4a1fb80231b21b4a1fb802
30b21b4b1fb8022fb21b4b1fb8022eb21b4c1fb8022db21b4c1fb8022cb2
1b4c1fb8022bb21b4c1fb8022ab21b4c1fb80229b21b4c1fb80228b21b4c
1fb80227b21b491fb80226b21b491fb80225b21b4a1fb80224b21b4a1fb8
0223b21b4a1fb80222b21b4b1fb80221b21b4b1fb80220b21b4c1fb8021f
b21b4c1fb8021eb21b4c1fb8021db21b4c1fb8021cb21b4c1fb8021bb21b
4c1fb8021ab21a4e1fb80219b21a4e1fb80218b21a4f1fb80217b21a4f1f
b80216b21a4e1fb80215b21a4e1fb80214b21a4f1fb80213b21a4f1fb802
12b21a4f1fb80211b21a4e1fb80210b21a4e1fb8020fb21a4f1fb8020eb2
1a4f1fb8020db21a4f1fb8020cb21a4e1fb8020bb21a4e1fb8020ab21a4e
1fb80209b21a4f1fb80208b21a4f1fb80207b21a4f1fb80206b219501fb8
0205b219511fb80204b219511fb80203b219501fb80202b219511fb80201
b219511fb80200b219511fb801ffb219511fb801feb219501fb801fdb219
511fb801fcb219511fb801fbb219511fb801fab219501fb801f9b219511f
b801f8b219511fb801f7b219511fb801f6b219511fb801f5b218541fb801
f4b218531fb801f3b218541fb801f2b218541fb801f1b218541fb801f0b2
18531fb801efb218541fb801eeb218541fb801edb218541fb801ecb21853
1fb801ebb218531fb801eab218541fb801e9b218541fb801e8b218541fb8
01e7b218541fb801e6b218531fb801e5b218541fb801e4b218531fb801e3
b218541fb801e2b218541fb801e1b218541fb801e0b218531fb801dfb218
531fb801deb218541fb801ddb218541fb801dcb218541fb801dbb218541f
b801dab218531fb801d9b218541fb801d8b218541fb801d7b217571fb801
d6b217561fb801d5b217561fb801d4b217571fb801d3b217571fb801d2b2
17571fb801d1b217571fb801d0b217561fb801cfb217561fb801ceb21757
1fb801cdb217571fb801ccb217571fb801cbb217571fb801cab217561fb8
01c9b217561fb801c8b217571fb801c7b217571fb801c6b217571fb801c5
b217571fb801c4b217571fb801c3b217561fb801c2b217571fb801c1b217
571fb801c0b217571fb801bfb217561fb801beb217561fb801bdb217571f
b801bcb217571fb801bbb217571fb801bab217571fb801b9b217571fb801
b8b217561fb801b7b217571fb801b6b217571fb801b5b217571fb801b4b2
17571fb801b3b2163f1fb801b2b2165b1fb801b1b2165b1fb801b0b2165b
1fb801afb2165b1fb801aeb2165b1fb801adb2165b1fb801acb2165b1fb8
01abb2165b1fb801aab2163e1fb801a9b2163f1fb801a8b2163f1fb801a7
b2165b1fb801a6b2165b1fb801a5b2165b1fb801a4b2165b1fb801a3b216
5b1fb801a2b2165b1fb801a1b2165b1fb801a0b2165b1fb8019fb2163e1f
b8019eb2163f1fb8019db2163f1fb8019cb2165b1fb8019bb2165b1fb801
9ab2165b1fb80199b2165b1fb80198b2163e1fb80197b2165b1fb80196b2
165b1fb80195b2165b1fb80194b2163e1fb80193b2163f1fb80192b2163f
1fb80191b2165b1fb80190b2165b1fb8018fb2165b1fb8018eb2165b1fb8
018db2165b1fb8018cb2163f1fb8018bb2165b1fb8018ab2165b1fb80189
b2165b1fb80188b2165b1fb80187b2165b1fb80186b215611fb80185b215
621fb80184b215621fb80183b215661fb80182b215661fb80181b215551f
b80180b215451fb8017fb215361fb8017eb215361fb8017db215611fb801
7cb215621fb8017bb215621fb8017ab215641fb80179b215661fb80178b2
15661fb80177b215661fb80176b215661fb80175b215661fb80174b21566
1fb80173b215451fb80172b215621fb80171b215621fb80170b215631fb8
016fb215641fb8016eb215661fb8016db215661fb8016cb215661fb8016b
b215661fb8016ab215661fb80169b215621fb80168b215621fb80167b215
611fb80166b215641fb80165b215641fb80164b215661fb80163b215661f
b80162b215661fb80161b215661fb80160b215661fb8015fb215661fb801
5eb215551fb8015db215451fb8015cb215451fb8015bb215361fb8015ab2
15611fb80159b215621fb80158b215621fb80157b215631fb80156b21564
1fb80155b215661fb80154b215661fb80153b215661fb80152b215661fb8
0151b214401fb80150b214551fb8014fb214561fb8014eb214831fb8014d
b2142d1fb8014cb214401fb8014bb214401fb8014ab214411fb80149b214
401fb80148b214401fb80147b214411fb80146b2147e1fb80145b214871f
b80144b2147f1fb80143b214801fb80142b212461fb80141b212461fb801
40b212461fb8013fb212461fb8013eb212441fb8013db212461fb8013cb2
11591fb8013bb211591fb8013ab2115b1fb80139b2115b1fb80138b21147
1fb80137b211581fb80136b2115a1fb80135b2115b1fb80134b2115b1fb8
0133b2112c1fb80132b211471fb80131b211551fb80130b211571fb8012f
b211571fb8012eb211581fb8012db211591fb8012cb211591fb8012bb211
5a1fb8012ab2115a1fb80129b2115b1fb80128b2115b1fb80127b2115b1f
b80126b2115b1fb80125b211561fb80124b211561fb80123b211571fb801
22b211581fb80121b211591fb80120b2115a1fb8011fb2115a1fb8011eb2
115b1fb8011db2115b1fb8011cb2115b1fb8011bb2115b1fb8011ab2115b
1fb80119b2105d1fb80118b2105e1fb80117b2105f1fb80116b2105f1fb8
0115b2105f1fb80114b2105f1fb80113b2105f1fb80112b2105d1fb80111
b2105e1fb80110b2105f1fb8010fb2105f1fb8010eb2105f1fb8010db210
5f1fb8010cb2105d1fb8010bb2105e1fb8010ab2105f1fb80109b2105f1f
b80108b2105f1fb80107b2105f1fb80106b2105d1fb80105b2105e1fb801
04b2105f1fb80103b2105f1fb80102b2105f1fb80101b2105f1fb8010040
ff0f621fff0f621ffe0f631ffd0f641ffc0f621ffb0f621ffa0f621ff90f
631ff80f641ff70f641ff60f641ff50f641ff40f621ff30f621ff20f631f
f10f641ff00f641fef0f641fee0f641fed0f621fec0f621feb0f631fea0f
641fe90f641fe80f641fe70f641fe60e671fe50e681fe40e681fe30e681f
e20e681fe10e671fe00e681fdf0e681fde0e681fdd0e671fdc0e681fdb0e
681fda0e681fd90e681fd80d6b1fd70d311fd60d6b1fd50d6c1fd40d261f
d30d261fd20d6c1fd10d2b1fd00d2b1fcf0d2b1fce0d6b1fcd0d6c1fcc0d
6d1fcb0d6b1fca0d6c1fc90d6d1fc80d6a1fc70d691fc60d681fc50d671f
c40d261fc30d311fc20d311fc10d311f40ffc00d311fbf0d311fbe0d311f
bd0c711fbc0c721fbb0c731fba0c741fb90c741fb80c741fb70c711fb60c
711fb50c721fb40c731fb30c741fb20c741fb10c741fb00c741faf0b791f
ae0b7a1fad0b7c1fac0b7d1fab0b7e1faa0b7e1fa90b7e1fa80b7e1fa70b
7e1fa60b7e1fa50b2d1fa40b7e1fa30b7e1fa20b791fa10b7e1fa00b6b1f
9f0b791f9e0b7e1f9d0b7e1f9c0b791f9b0b7a1f9a0b7c1f990b7d1f980b
7e1f970b7e1f960b7e1f950b7e1f940b7e1f930b7e1f920b6b1f910b2d1f
900a4e1f8f0a4f1f8e0a671f8d0aa51f8c0aa71f8503251f8403381f8301
381f8255805581ab80557f557d557eab7d550b7d010b7d1b7d4b7d7b7dab
7ddb7d4012060a7c557a557bab7a557955775578ab7755ba028600660285
403c5576ab755504751475747503f47501ab750144750130750102007510
752075030c7455725573ab7255007250728072b072043bb072e072020072
010ab8ffc0b3721b1e46b8ffc0407c720d104671556f5570ab6f556e666d
556a03251f6938675568ab67556638645565ab645563386255613860555f
385d555eab5d555c385a555bab5a55593858555703251f5638545555ab54
555338515552ab51554f384e554e03251f4d384b554cab4b554a38485549
ab4855473846554503381f001c101c201c0310b8ffc0404e1c1b1e46001b
0142301b401be01bf01b04001bb01bc01b03120f1a1f1a02290f1901434f
19016f197f198f19030f18cf18024018292c460f17cf17df17ef17041340
17292e460016101620160315b8ffc0b3164d5446b8ffc0b3163f4446b8ff
c0b316313546b8ffc0401f162326460f15010f151f150245ef1501860003
012001010001100120010308b8ffc0b401151f4603bd0100010000050001
019000542b4bb80800524bb008505bb00188b02553b00188b040515ab006
88b000555a5b58b101018e59b101024354b0144b515a58b101018e59858d
8d001d424bb01d5358b203a0a01d42594bb0805358b20340401d42594bb0
ff5358b20300001d42592b5e7375732b58403d0011e011f0110315bf10cf
10020f0f010f0fff0f02400f3135460f0e1f0e020f0e1f0eff0e03400e31
37460f0d1f0d020f0d1f0dff0d0316400d313746b8ffc040270c5054460f
0b1f0b02553f0b4f0b02400b3f4346400b2d304600030120010100011001
20010308b8ffc0b301151f462b5e7375732b2b745e732b2b5e73742b7374
2b7374745e735901755e73742b2b2b2b5e732b5e732b7374755e735e735e
73755e732b5e73002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b5e73755e732b2b5e735f73737373742b2b2b2b2b2b5e
73742b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2bb1000243545841ff0284006402830064028200640281006402
800064027f0064027e0064027d0064027c0064027b0064027a0064027900
640278006402770064027600640275006402740064027300640271006402
700064026f0064026e0064026d0064026c0064026b0064026a0064026900
640268006402670064026600640265006402640064026300640262006402
61006402600064025f0064025e0064025d0064025c0064025b0064025a00
640259006402580064025700640256006402550064025400640253006402
5200640251006402500064024f0064024e0064024d0064024c0064024b00
64024a006402490064024800640247006402460064024500640244006402
430064024200640241006402400064023f0064023e0064023d0064023c00
64023b0064023a0064023900640238006402370064023600640235006402
34006402330064023200640231006402300064022f0064022e0064022d00
64022c0064022b0064022a00640229006402280064022700640226006402
2500640224006402230064022200640221006402200064021f0064021e00
64021d0064021c0064021b0064021a006402190064021800640217006402
160064021500640214006402130064021200640211006402100064020f00
64020e0064020d0064020c0064020b0064020a0064020900640208006402
0700640206006402050064020441ff006402030064020200640201006402
00006401ff006401fe006401fd006401fc006401fb006401fa006401f900
6401f8006401f7006401f6006401f5006401f4006401f3006401f2006401
f1006401f0006401ef006401ee006401ed006401ec006401eb006401ea00
6401e9006401e8006401e7006401e6006401e5006401e4006401e3006401
e2006401e1006401e0006401df006401de006401dd006401dc006401db00
6401da006401d9006401d8006401d7006401d6006401d5006401d4006401
d3006401d2006401d1006401d0006401cf006401ce006401cd006401cc00
6401cb006401ca006401c9006401c8006401c7006401c6006401c5006401
c4006401c3006401c2006401c1006401c0006401bf006401be006401bd00
6401bc006401bb006401ba006401b9006401b8006401b7006401b6006401
b5006401b4006401b3006401b2006401b1006401b0006401af006401ae00
6401ad006401ac006401ab006401aa006401a9006401a8006401a7006401
a6006401a5006401a4006401a3006401a2006401a1006401a00064019f00
64019e0064019d0064019c0064019b0064019a0064019900640198006401
970064019600640195006401940064019300640192006401910064019000
64018f0064018e0064018d0064018c0064018b0064018a00640189006401
880064018700640186006401850064418001840064018300640182006401
81006401800064017f0064017e0064017d0064017c0064017b0064017a00
640179006401780064017700640176006401750064017400640173006401
7200640171006401700064016f0064016e0064016d0064016c0064016b00
64016a006401690064016800640167006401660064016500640164006401
630064016200640161006401600064015f0064015e0064015d0064015c00
64015b0064015a0064015900640158006401570064015600640155006401
540064015300640152006401500064014f0064014e0064014c0064014b00
64014a006401490064014800640147006401460064014500640144006401
4300642b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b592b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b00737373737373742b2b2b2b2b2b2b2b2b2b
185f5e0000>]def 
/GlyphDirectory 16 dict def
CIDFontName currentdict end /CIDFont defineresource pop
ct_GlyphDirProcs begin
/RAMBAA+Calibri 6 GetGlyphDirectory
1004 <00020048ffed03c705210013002b010bb0852b584019281201291101260d
01260c012608012507012a03012902012db8ffc040250f024d602d011418
10014d14100f014d14160d014d140a0c014d14200b014d14180c014d14bb
022d00000020ffe8b310014d20b8fff0b30f014d20b8ffeab30d014d20b8
fff6b30c014d20b8ffe8b60c014d24200120b8022d40090a200030004000
030ab8fff040090f014d2f0a4f0a0200b8ffd040090f014d0a100f024d00
b8ffc0400a0f024d000a000a2d2c1bb8010ab20f5325b8010ab10556003f
ed3fed11120139392f2f2b2b2b5d2b5d10e15d2b2b2b2b2b10e12b2b2b2b
2b2b31305d2b5d5d5d5d5d5d5d5d1bb10f1bb8010ab46c0f530525b8010a
b26c055600183f2b3f2b30315901140e0223222e0235343e0233321e0207
342e0423220e0215141e0233323e0403c72f6db0817aa7662b306cb0807b
a7662bb00e1b2b3c4d30556a3d161e41654838553d281809028a95f6b161
57a9f7a094f7b16157a9f7ac619a76553719508cbc6c91cb803a24435e72
8500> |
1009 <00010065ffed0396050e003e00fcb0852b58400d27370127360126080126
030140b8ffc0b60f024d60400137b8ffe8b310014d37b8fff0b40b0d014c
37ba02110028ffc0402810014d28400f014d280e4f326f327f3203321d18
10014d1d100f014d1d100c0d014c1d200b014d1dba02330000ffe8b30f02
4d00b8ffc0b50f014d004013b8ffc0b70f10014c13131836b8012c400c2c
3af42022012222052c5118b8010bb10556003fed3f12392f5ded10ed1139
2f2b0110d62b2be12b2b2b2bc45dd4d42b2be12b2b31305d2b005d5d015d
5d1bb41313182c36b8012c40116c223af46c0022010b032222052c510518
b8010bb26c055600183f2b3f12392f5f5e5d2b2b11392f30315901140e02
23222e0635343e0233321e0233323e0235342e0223220623222635113436
3321321e02151406232111363633321e0203964680b16c3c6c54360f0605
0203080b070a2a4769484370512e27517c563d58261c181f1d023d080f0a
051412fe1d2349306fa66f3901a068a26f3a1119180e0c111a12111b1108
191d1a2044674a3e5f3f1f0c1a25020f212009121c132428fe9505023561
8a00> |
1005 <000100ae0000039f0517002e010cb0852b584024241e01241d01241c0123
1b01241a01241901261801261701291201291101122010014d30b8ffc040
0d0f024d60300100200b014d0029b8ffe8b310014d29b8fff0b30f014d29
b8fff0b30d014d29b8fff6b30c014d29b8fff8b30b014d29b80211400e1e
18200b014d180b200b014d0b11b8ffe0b30f014d11b8ffd4b30f024d11b8
ffc0b310014d11b8ffe0b30f014d11b8ffc0b30c014d11b8fff040090b01
4da01101111312b8013fb323522910b80107b10654003fed323ffdcd012f
5d2b2b2b2b2b2bcd2bc42b33f12b2b2b2b2bc52b31305d2b002b015d5d5d
5d5d5d5d5d5d5d1bb313402312b8013fb56c2352290610b80107b26c0654
00183f2b323f2b1acd30315925140e022321222e0235343e023321110706
06262635343e0237253e0333321e02151133321e02039f060a0d07fd5c07
0c0b0606090d08010efa13170e0503060b09012a040c12181218201206ea
080e090544131a100707101a13121a110903d8950a040d1e171118100c06
bf0304040104070b06fb8f09111a> |
1006 <000100720000039c0521003e00cab0852b58400d2936012b1e01291d0126
1e0140b8ffc040170f024d604001161810014d16100c0d014c16200b014d
16b8022db633253325330039b8ffe8b310014d39ba027f000bffc0b30c01
4d0bb8ffe0400b0f014d0b1138392020391bb8012eb63316062e531039b8
0128b10654003fed323f123939ed11392f123939012f2b2be12bcd39392f
2f10e12b2b2b31305d2b005d015d5d5d1bb71138392020392e1bb8012e40
096c3316062e53100639b80128b26c065400183f2b323f1239392b11392f
12393930315925140e022321222e0235343e0237133e0335342e0223220e
0223222e0235343e0633321e0215140e02070721321e02039c05090f09fd
350e150f07030a0f0cfb576939121c3550343d6149310c070b0704020508
183b596b3b5e8d5d2e1647866fcd0233080f0b054a121c130907101e1614
1e17170d010a5c9278622b2b4d3a2222282208121e150f16100e15242318
355c7a453e7b8faf72d609121b00> |
1007 <00010067ffed0392052100580147b0852b58b9005affc0401c0f024d605a
01310810014d31100f014d31100c0d014c31200b014d31b80235400a4e53
264e4e1813014d40b8ffe840260f014d26200f014d40264e4e2640030e1b
0810014d1b100f014d1b100c0d014c1b200b014d1bb8fff8b30b014d1bb8
022db500080b014d00b8ffe8b40f024d000eb8ffe0b30f014d0eb8fff0b3
0f014d0eb8ffc040130c014d0e3b400f014d3b400c0d014c2f3b0111b8ff
c0b30f014d11b8ffc0400a0c0d014c3b113b111636b8010b400a49532cf3
202005495316b8010bb10556003fed3f12392fed3910ed1139392f2f2b2b
5d2b2b012f2b2b2bd42b2be12b2b2b2b2b1217392f2f2f2b2b2b11123910
e12b2b2b2b31305d2b1b400c0f3b010b033b113b11164936b8010b400d6c
53202cf36c20200549530516b8010bb26c055600183f2b3f12392f2b392b
1139392f2f5f5e5d30315901140e0223222e0635343633321e0233323e02
35342e022323222e0235343e023333323e0235342e0223220e0223222e02
35343e0633321e0215140e0207151e0303923e74aa6b4171583a0f080603
0e0d0935536f44426444222b53794d7b080f0b07060b0e0971426949271a
3451353a614c320a070b0703020608133a556f405a885b2d203e5a3b436f
502d0172598f6637151d1f0e0e141d15241c202520223e55323758402207
101a1513190f07224059372849361f232823050f1b160f17110e13242318
2e5475473d6951390b020735506b> |
1008 <00020030fffa03d30514002a002e0125b0852b58403a252e01262d01272c
01242701242601251c01261b01231a012419012518012517012616012615
01261401261001260f012405012404012b1b0130b8ffc040120f024d6030
012d16180f024d162010014d16b8ffe0b30f014d16b8ffe0b70c014d161c
2e2e10b8fffc401d0f024d101810014d10100f014d10100d014d100a0c01
4d10100b014d10bb021100270004ffd4b30f024d04b8ffd0b30c014d04b8
ffe0400a0b014d0404302f271b2eb8010b400a042b2110100a21520a5500
3f3f12392f123933ed3232111201392f2b2b2b33e12b2b2b2b2b2b321133
cd2b2b2b2b3231305d2b005d015d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d5d
5d1bb3271b102eb8010b400b6c042b2110100a21520a5500183f3f12392f
1239332b3232303159011406232311140e0223222e02351121222e023534
3e0237013e0333321e0215113332160123012103d3141292081420191820
1307fdea0c100d0502060a0701d205131e2c1e21311e10921115fea102fe
5b01a701702126fef0080b080404080b08011006101e18131e19170d0312
080c080305080d09fcc62302e9fd3a00> |
0 <00050000fe7303d2050e000300070039004d004e0097b0852b58bc000d01
520016003a01b5b5154444082d07be014300020020015400080001014340
0f04020db71a1a3f23b735068d031149b8012db43f078d0202003ffddefd
ce2ffddeed12392fed012fdde1dee110f1ce11392f33e1d4e131301b4014
1a0db76c1a1a3f3523b76c3503068d6c03113f49b8012d40096c3f400207
8d6c020200183f2b1ace2bce2f2bce2b12392f2b30315901112111011121
1101140e020707140623222e02352726363333323e0235342623220e0223
222e02353436373e0333321e0203140e0223222e0235343e0233321e0201
03d2fc5a034ffd06027e233f5633051e1a0f140d0605021c18122d3c2510
535b253c2e1d0703070603050807283742224b6c4522da07111d15161d12
0808121d16151d1107fddb050efaf2050efb43046cfb9403063b5c3f2403
980a0802040606b81e18192a3b2149560f1310040b13101116080712110c
28445cfd86151c120808121c15151d120808121dfd4d> |
!
end
/RAMBAA+Calibri-Identity-H /Identity-H 0 [/RAMBAA+Calibri] ct_ComposeFont pop
end end
%ADOEndSubsetFont
/EYPFAS+Calibri /RAMBAA+Calibri-Identity-H findfont ct_VMDictPut
EYPFAS+Calibri [7.98 0 0 -7.98 0 0 ]msf
5.53558 128.818 mo
(\003\354)sh
5.53558 116.638 mo
(\003\361)sh
1.45541 104.458 mo
(\003\355\003\354)
[4.08096 0 ]xsh
1.45541 92.2782 mo
(\003\355\003\361)
[4.08096 0 ]xsh
1.45541 80.0983 mo
(\003\356\003\354)
[4.08096 0 ]xsh
1.45541 67.9185 mo
(\003\356\003\361)
[4.08096 0 ]xsh
1.45541 55.7386 mo
(\003\357\003\354)
[4.08096 0 ]xsh
1.45541 43.5587 mo
(\003\357\003\361)
[4.08096 0 ]xsh
1.45541 31.3788 mo
(\003\360\003\354)
[4.08096 0 ]xsh
1.45541 19.1391 mo
(\003\360\003\361)
[4.08096 0 ]xsh
1.45541 6.95923 mo
(\003\361\003\354)
[4.08096 0 ]xsh
14.9552 139.259 mo
(\003\354\003\361\003\355\003\354\003\355\003\361\003\356\003\354\003\356\003\361\003\357\003\354)
[53.1612 51.1215 4.08095 49.0212 4.08093 49.081 4.08093 49.081 4.08096 49.0212 4.08096 0 
]xsh
57.7356 27.1781 mo
59.6556 27.1781 li
59.8956 27.1781 60.1356 27.4182 60.1356 27.6581 cv
60.1356 27.8981 59.8956 28.1381 59.6556 28.1381 cv
57.7356 28.1381 li
57.4956 28.1381 57.2556 27.8981 57.2556 27.6581 cv
57.2556 27.4182 57.4956 27.1781 57.7356 27.1781 cv
cp
61.5756 27.1781 mo
63.4956 27.1781 li
63.7356 27.1781 63.9756 27.4182 63.9756 27.6581 cv
63.9756 27.8981 63.7356 28.1381 63.4956 28.1381 cv
61.5756 28.1381 li
61.3356 28.1381 61.0956 27.8981 61.0956 27.6581 cv
61.0956 27.4182 61.3356 27.1781 61.5756 27.1781 cv
cp
65.4156 27.1781 mo
67.3356 27.1781 li
67.5756 27.1781 67.8156 27.4182 67.8156 27.6581 cv
67.8156 27.8981 67.5756 28.1381 67.3356 28.1381 cv
65.4156 28.1381 li
65.1756 28.1381 64.9356 27.8981 64.9356 27.6581 cv
64.9356 27.4182 65.1756 27.1781 65.4156 27.1781 cv
cp
69.2556 27.1781 mo
71.1756 27.1781 li
71.4156 27.1781 71.6556 27.4182 71.6556 27.6581 cv
71.6556 27.8981 71.4156 28.1381 71.1756 28.1381 cv
69.2556 28.1381 li
69.0156 28.1381 68.7756 27.8981 68.7756 27.6581 cv
68.7756 27.4182 69.0156 27.1781 69.2556 27.1781 cv
cp
73.0956 27.1781 mo
75.0156 27.1781 li
75.2556 27.1781 75.4956 27.4182 75.4956 27.6581 cv
75.4956 27.8981 75.2556 28.1381 75.0156 28.1381 cv
73.0956 28.1381 li
72.8556 28.1381 72.6156 27.8981 72.6156 27.6581 cv
72.6156 27.4182 72.8556 27.1781 73.0956 27.1781 cv
cp
76.9356 27.1781 mo
78.8556 27.1781 li
79.0956 27.1781 79.3356 27.4182 79.3356 27.6581 cv
79.3356 27.8981 79.0956 28.1381 78.8556 28.1381 cv
76.9356 28.1381 li
76.6956 28.1381 76.4556 27.8981 76.4556 27.6581 cv
76.4556 27.4182 76.6956 27.1781 76.9356 27.1781 cv
cp
80.7756 27.1781 mo
82.6956 27.1781 li
82.9356 27.1781 83.1756 27.4182 83.1756 27.6581 cv
83.1756 27.8981 82.9356 28.1381 82.6956 28.1381 cv
80.7756 28.1381 li
80.5356 28.1381 80.2956 27.8981 80.2956 27.6581 cv
80.2956 27.4182 80.5356 27.1781 80.7756 27.1781 cv
0 0 0 1 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: RAMBAA+Calibri AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
ct_GlyphDirProcs begin
/RAMBAA+Calibri 11 GetGlyphDirectory
24 <000200ac0000048f050e0012001f0098b0852b58401d3f2101131810014d
13100f014d13140d014d13120c014d13180b014d13bb02320000001affe8
b310014d1ab8fff0b30f014d1ab8fff0b30d014d1ab8fff6b30c014d1ab8
ffe8b30b014d1abb021100090018010cb20e511bb80126b10554003fed3f
ed012fe12b2b2b2b2bd4e12b2b2b2b2b31305d1bb10e18b8010cb46c0e51
051bb80126b26c055400183f2b3f2b30315901140e022321222635113436
3321321e0207342e0223231133323e02048f56a5f0a6feee172929170125
a8e89d51b5346faa86afb17caa7239029aa8fba5521f270482271f57a3e8
9969b5844afc113e80c1> |
258 <0002005cffed033f03ca0033004000f6b0852b5840200f421f422f42030b
0917340c0c014d34100d014d34180b014d34100f10014c34b801f7400e00
27270f00010c00100f014d003ab8fff0b30c014d3ab8ffe8b30d014d3ab8
ffe8b30b014d3ab8ffe8b40f10014c3ab8020840141117c500341034023b
c0340100340134342e412ab8011b400fd022012222041dea2e4a3ddc0c4d
04002f3fed3fed12392f5ded1112392f5d715e5ded012fe12b2b2b2bc42b
5e5d392f10e12b2b2b2b323931305e5d1b400d0b17013417c56c34342e41
222ab8011b40166c00220116042222042e1dea6c2e4a0c3ddc6c0c4d0400
182f3f2b3f2b12392f5f5e5d2b1112392f2b5d3031592514060623222626
3535060623222e0235343e02333335342e0223220e0223222e0235343e04
33321e02150723220e0215141633323637033f101c1b1a1f0e3b91514773
512d3e74a8697c16314e393d6149310c080c0904071b4256663461885426
a48d4464421f5950416f3d180c0c06060c0c5a3f46254666414c704a2546
3450351b1d231d0810190f191d1a231d132c557e54c4172d3f2946534244
> |
410 <00010021ffef026d04ad003a0089b0852b58b4290011232db8fff0b30f01
4d2db8fff0b30d014d2db8fff6b30c014d2db8ffe8b310014d2db8ffe8b3
0b014d2db801f8400c170d2ded23481d0ded174831b80104b1074d003fed
3fedcd3fed012f33e12b2b2b2b2b32cdc43231301b4011232ded6c23481d
1740170ded6c17480731b80104b26c074d00183f2b3f2b1a10cd3f2b3031
5925140e0423222e02351123222635343e02333335343e0233321e021515
33321e02151406232311141633323e0233321e02026d081020292e174664
401d7e0f1205080d087d0713201819201208e7080c0904120fe737471724
1c1408050905045b1d22100e0906254b734e020e2024131a1107d6070c09
0404090c07d607111a132420fe0a5d5f090a09050e18> |

3 <>  |
4 <00020023fffa047e05140022002600dcb0852b58b90024ffe8b40c10014c
23b8ffe8b40c10014c26b8fff0b40b10014c0bb8fff0b40b10014c0ab8ff
f0401a0b10014c25100b10014c0d100b10014c0c100b10014c40280125b8
fff0402c0b014d24232625f40c0b0c18221d230a0d0116040c000c100c02
af23bf23cf2303230c230c121d5212550555003f3f3f1239392f2f5d5d11
173911123939113310ed3211333130012b5d2b2b2b2b2b2b002b2b1b401e
2423260c25f46c0b0c18221d230a0d0116040c230c230c121d5212550555
00183f3f3f1239392f2f1117391112393911332b32113330315925161606
0623222e02270321030e03232226263637013e0333321e02170723032104
75080110251f1f251309046ffde66a030a13231c1d250f010801b2040d19
271e202a1a0e047b01df01c23d161b0e0403070c09013bfec9090d090405
0e1b1604b20b0e080303080f0b8dfd7b> |
!
end
end end
%ADOEndSubsetFont
EYPFAS+Calibri [7.98 0 0 -7.98 0 0 ]msf
85.6956 29.9378 mo
(\000\030\001\002\001\232\001\002\000\003\000\004)
[4.92845 3.84314 2.69406 3.7802 1.85936 0 ]xsh
57.7356 39.4181 mo
82.9356 39.4181 li
83.1756 39.4181 83.4156 39.6581 83.4156 39.8981 cv
83.4156 40.1381 83.1756 40.3781 82.9356 40.3781 cv
57.7356 40.3781 li
57.4956 40.3781 57.2556 40.1381 57.2556 39.8981 cv
57.2556 39.6581 57.4956 39.4181 57.7356 39.4181 cv
.190097 .83154 .718898 .0656443 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: RAMBAA+Calibri AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
ct_GlyphDirProcs begin
/RAMBAA+Calibri 12 GetGlyphDirectory
17 <000300ac00000401050e001e002b003800f7b0852b58401a1f1810014d1f
100f014d1f100d014d1f180c014d1f200b014d1fb8022e40281a15401001
4d15400f014d15150b2c1810014d2c100f014d2c100d014d2c180c014d2c
200b014d2cba02320000ffc0b50b014d002633b8ffe8b310014d33b8fff0
b30f014d33b8fff0b30d014d33b8fff6b30c014d33b8ffe8b30b014d33b8
0210400da00bc00b020b1a27f431310724b80109b2105134b8010bb10754
003fed3fed12392fed39012f5de12b2b2b2b2b32d42be12b2b2b2b2b1239
2f2b2b39e12b2b2b2b2b31301b400a1a3127f46c3131071024b80109b46c
10510734b8010bb26c075400183f2b3f2b12392f2b3930315901140e0423
212226351134363321321e0215140e02071e0301342e0223231133323e02
13342e0223231133323e0204011f384f637149feae172929170126749463
32162b412a355c4528fefd1a385a4ab2c4435236194e25476b51cefa3b58
432601733d67523e2a151f270482271f2c547a4d2e544738120a35526e02
012f4c351cfe5d233b4ffddd3a583c1ffe381c375200> |
!
end
end end
%ADOEndSubsetFont
EYPFAS+Calibri [7.98 0 0 -7.98 0 0 ]msf
85.6956 42.1778 mo
(\000\030\001\002\001\232\001\002\000\003\000\021)
[4.92845 3.84314 2.69406 3.7802 1.85936 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/EYPFAS+Calibri-Identity-H uf
/EYPFAS+Calibri /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
